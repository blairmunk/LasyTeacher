import os
import random
import subprocess
from pathlib import Path
from django.core.management.base import BaseCommand
from django.db import transaction
from django.conf import settings

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LaTeX minipage'

    def add_arguments(self, parser):
        parser.add_argument('--tasks', type=int, default=12, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏')
        parser.add_argument('--clear', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ')
        parser.add_argument('--no-images', action='store_true', help='–ù–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)')

    def handle(self, *args, **options):
        if options['clear']:
            self.stdout.write('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
            self.clear_old_data()

        self.stdout.write('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.setup_media_dirs()
        
        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            topics = self.create_test_topics()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if not options['no_images']:
                self.check_imagemagick()
                images_created = self.generate_test_images()
                self.stdout.write(f'üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_created}')
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            tasks = self.create_tasks_with_images(options['tasks'], topics)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            work = self.create_test_work(tasks)
            
        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ –ì–æ—Ç–æ–≤–æ!\n'
                f'  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(tasks)}\n'
                f'  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞: {work.name}\n'
                f'  ‚Ä¢ ID —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {work.id}\n\n'
                f'üöÄ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:\n'
                f'   python manage.py generate_latex work {work.id} --format pdf'
            )
        )

    def clear_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
        # –ò–º–ø–æ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        try:
            from tasks.models import Task, TaskImage
            from curriculum.models import Topic, SubTopic
            from students.models import Student, StudentGroup
            from task_groups.models import AnalogGroup, TaskGroup
            from works.models import Work, WorkAnalogGroup, Variant
            from events.models import Event, EventParticipation, Mark
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            from django.db import connection
            existing_tables = connection.introspection.table_names()
            
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if 'tasks_taskimage' in existing_tables:
                TaskImage.objects.filter(task__text__contains='–¢–ï–°–¢').delete()
            
            if 'tasks_task' in existing_tables:
                Task.objects.filter(text__contains='–¢–ï–°–¢').delete()
            
            if 'curriculum_topic' in existing_tables:
                Topic.objects.filter(name__contains='–¢–ï–°–¢').delete()
            
            if 'works_work' in existing_tables:
                Work.objects.filter(name__contains='–¢–ï–°–¢').delete()
            
            self.stdout.write('‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}')
            self.stdout.write('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏...')


    def setup_media_dirs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
        media_dir = Path(settings.MEDIA_ROOT) / 'task_images'
        media_dir.mkdir(parents=True, exist_ok=True)
        self.media_dir = media_dir

    def check_imagemagick(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ImageMagick"""
        try:
            result = subprocess.run(['convert', '-version'], capture_output=True, text=True)
            if result.returncode == 0:
                self.stdout.write('‚úÖ ImageMagick –Ω–∞–π–¥–µ–Ω')
                return True
        except FileNotFoundError:
            pass
        
        self.stdout.write(
            self.style.WARNING(
                '‚ö†Ô∏è ImageMagick –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n'
                '   Ubuntu/Debian: sudo apt-get install imagemagick\n'
                '   CentOS/RHEL: sudo yum install ImageMagick\n'
                '   macOS: brew install imagemagick'
            )
        )
        return False

    def generate_test_images(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é ImageMagick"""
        
        # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        math_formulas = [
            'x¬≤ + 2x + 1 = 0',
            '‚à´ x¬≤ dx = x¬≥/3 + C',
            'sin¬≤Œ± + cos¬≤Œ± = 1',
            'lim(x‚Üí0) sin(x)/x = 1',
            'a¬≤ + b¬≤ = c¬≤',
            'f(x) = ax¬≤ + bx + c',
            'log‚ÇÇ(8) = 3',
            '‚àö(x¬≤ + y¬≤)',
            'Œ£(i=1 to n) i = n(n+1)/2',
            'e^(iœÄ) + 1 = 0',
            'dy/dx = 2x + 3',
            '|x - 2| < 5'
        ]
        
        # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã (–æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)
        geometry_figures = [
            '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ ABC',
            '–û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Å —Ü–µ–Ω—Ç—Ä–æ–º O',
            '–ü–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º ABCD',
            '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å',
            '–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ y=x¬≤',
            '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 4√ó3'
        ]
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã
        physics_diagrams = [
            '–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–∏',
            '–†—ã—á–∞–≥ —Å –≥—Ä—É–∑–∞–º–∏',
            '–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è',
            '–ö–æ–ª–µ–±–∞–Ω–∏—è –º–∞—è—Ç–Ω–∏–∫–∞'
        ]
        
        all_content = math_formulas + geometry_figures + physics_diagrams
        
        created_count = 0
        
        for i, content in enumerate(all_content, 1):
            filename = f'test_image_{i:02d}.png'
            filepath = self.media_dir / filename
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            success = self.create_image_with_text(
                text=content,
                output_path=str(filepath),
                width=400,
                height=300,
                font_size=20
            )
            
            if success:
                created_count += 1
                if i <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3
                    self.stdout.write(f'  üì∏ –°–æ–∑–¥–∞–Ω–æ: {filename} ({content[:30]}...)')
        
        return created_count

    def create_image_with_text(self, text, output_path, width=400, height=300, font_size=20):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É—è ImageMagick"""
        try:
            # –ö–æ–º–∞–Ω–¥–∞ ImageMagick –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
            cmd = [
                'convert',
                '-size', f'{width}x{height}',
                'xc:white',  # –ë–µ–ª—ã–π —Ñ–æ–Ω
                '-fill', 'black',
                '-font', 'DejaVu-Sans',  # –®—Ä–∏—Ñ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
                '-pointsize', str(font_size),
                '-gravity', 'center',
                '-annotate', '0', text,
                '-border', '10',
                '-bordercolor', 'lightgray',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                return True
            else:
                # –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                simple_cmd = [
                    'convert',
                    '-size', f'{width}x{height}',
                    'xc:white',
                    '-fill', 'black',
                    '-pointsize', str(font_size),
                    '-gravity', 'center',
                    '-annotate', '0', text,
                    output_path
                ]
                
                simple_result = subprocess.run(simple_cmd, capture_output=True, text=True)
                return simple_result.returncode == 0
                
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {output_path}: {e}')
            return False

    def create_test_topics(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–º"""
        from curriculum.models import Topic, SubTopic
        
        topics_data = [
            ('mathematics', 8, '–ê–ª–≥–µ–±—Ä–∞', '–¢–ï–°–¢: –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è'),
            ('mathematics', 9, '–ê–ª–≥–µ–±—Ä–∞', '–¢–ï–°–¢: –§—É–Ω–∫—Ü–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏'),
            ('geometry', 8, '–ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è', '–¢–ï–°–¢: –ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏'),
            ('physics', 9, '–ú–µ—Ö–∞–Ω–∏–∫–∞', '–¢–ï–°–¢: –ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞'),
        ]
        
        topics = []
        for subject, grade, section, name in topics_data:
            topic, created = Topic.objects.get_or_create(
                name=name,
                subject=subject,
                grade_level=grade,
                section=section,
                defaults={
                    'order': len(topics) + 1,
                    'difficulty_level': 2,
                    'description': f'–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LaTeX –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {name}'
                }
            )
            topics.append(topic)
            
            if created:
                # –°–æ–∑–¥–∞–µ–º 2 –ø–æ–¥—Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
                for j in range(2):
                    SubTopic.objects.get_or_create(
                        topic=topic,
                        name=f'–ü–æ–¥—Ç–µ–º–∞ {j+1}',
                        defaults={
                            'order': j+1,
                            'description': f'–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥—Ç–µ–º–∞ {j+1} –¥–ª—è {topic.name}'
                        }
                    )
        
        return topics

    def create_tasks_with_images(self, count, topics):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        from tasks.models import Task, TaskImage
        
        # –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã minipage)
        positions = ['right_40', 'right_20', 'bottom_100', 'bottom_70']
        
        # –¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        task_templates = [
            '–¢–ï–°–¢: –†–µ—à–∏—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ {}. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏.',
            '–¢–ï–°–¢: –ù–∞ —Ä–∏—Å—É–Ω–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞ —Å—Ö–µ–º–∞ {}. –ù–∞–π–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.',
            '–¢–ï–°–¢: –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é {} –∏ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –≥—Ä–∞—Ñ–∏–∫.',
            '–¢–ï–°–¢: –ü–æ –¥–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ {} –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–µ–ª–∏—á–∏–Ω—ã.',
            '–¢–ï–°–¢: –î–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ {} –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–∏–≥—É—Ä.',
            '–¢–ï–°–¢: –í—ã—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è {} –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.',
            '–¢–ï–°–¢: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ {} –∏ –Ω–∞–π–¥–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.',
            '–¢–ï–°–¢: –ò—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É {}, —Ä–µ—à–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É.',
            '–¢–ï–°–¢: –ù–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {}. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥—ã.',
            '–¢–ï–°–¢: –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–µ–ª—å {} —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á–∏.',
            '–¢–ï–°–¢: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {} –ø–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º—É —á–µ—Ä—Ç–µ–∂—É.',
            '–¢–ï–°–¢: –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ {} –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.'
        ]
        
        # –û—Ç–≤–µ—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π
        answer_templates = [
            'x‚ÇÅ = -1, x‚ÇÇ = -1',
            '–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ',
            '–§—É–Ω–∫—Ü–∏—è —É–±—ã–≤–∞–µ—Ç –Ω–∞ (-‚àû; 0], –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –Ω–∞ [0; +‚àû)',
            'U = 12–í, I = 2–ê, R = 6–û–º',
            '–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —É–≥–ª–æ–≤',
            '42',
            'D(f) = (-‚àû; +‚àû), E(f) = [0; +‚àû)',
            '–û—Ç–≤–µ—Ç: 15 –º–µ—Ç—Ä–æ–≤',
            '–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
            '–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—è–º',
            'a = 5, b = 3, c = 4',
            '–§—É–Ω–∫—Ü–∏—è –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º—É–º –≤ —Ç–æ—á–∫–µ x = 2'
        ]
        
        tasks = []
        available_images = list(self.media_dir.glob('test_image_*.png'))
        
        if not available_images:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.')
            )
        
        for i in range(count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
            topic = random.choice(topics)
            subtopic = None
            if topic.subtopics.exists() and random.random() > 0.5:
                subtopic = random.choice(list(topic.subtopics.all()))
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
            template_idx = i % len(task_templates)
            formula_placeholder = f"—Ñ–æ—Ä–º—É–ª—ã_{i+1}"
            
            task = Task.objects.create(
                text=task_templates[template_idx].format(formula_placeholder),
                answer=answer_templates[template_idx],
                topic=topic,
                subtopic=subtopic,
                task_type='practical',
                difficulty=random.randint(2, 4),
                cognitive_level='apply',
                estimated_time=random.choice([10, 15, 20, 25]),
                short_solution=f'–¢–ï–°–¢: –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {i+1}',
                full_solution=f'–¢–ï–°–¢: –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {i+1} —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ —à–∞–≥–æ–≤.',
                hint=f'–¢–ï–°–¢: –ü–æ–¥—Å–∫–∞–∑–∫–∞ {i+1} - –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–∏—é
            if available_images:
                image_file = available_images[i % len(available_images)]
                position = positions[i % len(positions)]
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
                relative_path = f'task_images/{image_file.name}'
                
                TaskImage.objects.create(
                    task=task,
                    image=relative_path,
                    position=position,
                    caption=f'–¢–ï–°–¢: –†–∏—Å—É–Ω–æ–∫ {i+1} - {position}',
                    order=1
                )
                
                self.stdout.write(f'  üìù –ó–∞–¥–∞–Ω–∏–µ {i+1}: {position} - {task.text[:50]}...')
            
            tasks.append(task)
        
        return tasks

    def create_test_work(self, tasks):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        from works.models import Work
        from task_groups.models import AnalogGroup, TaskGroup
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–æ–≥–æ–≤
        group, created = AnalogGroup.objects.get_or_create(
            name='–¢–ï–°–¢: –ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
            defaults={
                'description': '–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LaTeX –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å minipage'
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
        for task in tasks:
            TaskGroup.objects.get_or_create(task=task, group=group)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—Ç—É
        work, created = Work.objects.get_or_create(
            name='–¢–ï–°–¢: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
            defaults={
                'duration': 45,
                'work_type': 'test'
            }
        )
        
        if created:
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Ä–∞–±–æ—Ç—É
            from works.models import WorkAnalogGroup
            WorkAnalogGroup.objects.get_or_create(
                work=work,
                analog_group=group,
                defaults={'count': 3}  # –ü–æ 3 –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if not work.variant_set.exists():
            work.generate_variants(4)
            self.stdout.write(f'  üìã –°–æ–∑–¥–∞–Ω–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã {work.name}')
        
        return work
