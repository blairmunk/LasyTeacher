You are an expert software architect. The user is providing you with the complete source code for a project, contained in a single file. Your task is to meticulously analyze the provided codebase to gain a comprehensive understanding of its structure, functionality, dependencies, and overall architecture.

A file tree is provided below to give you a high-level overview. The subsequent sections contain the full content of each file, clearly marked with "// FILE: <path>".

Your instructions are:
1.  **Analyze Thoroughly:** Read through every file to understand its purpose and how it interacts with other files.
2.  **Identify Key Components:** Pay close attention to configuration files (like package.json, pyproject.toml), entry points (like index.js, main.py), and core logic.

## Project File Tree

```
latex_generator/
├── __init__.py
├── admin.py
├── apps.py
├── combicode.txt
├── generators
│   ├── __init__.py
│   ├── base.py
│   ├── registry.py
│   └── work_generator.py
├── management
│   └── commands
│       ├── generate_latex.py
│       └── list_generators.py
├── migrations
│   └── __init__.py
├── models.py
├── templates
│   ├── admin
│   │   └── latex_generator
│   │       └── generate.html
│   └── latex
│       ├── base
│       │   └── document_base.tex
│       └── work
│           ├── all_variants.tex
│           └── work_all_variants.tex
├── tests
│   ├── __init__.py
│   └── test_basic.py
├── tests.py
├── urls.py
├── utils
│   ├── __init__.py
│   ├── compilation.py
│   ├── image_utils.py
│   └── latex_utils.py
└── views.py
```

---

// FILE: __init__.py
```

```

// FILE: admin.py
```
from django.contrib import admin
from django.http import HttpResponseRedirect
from django.urls import path
from django.shortcuts import render
from django.contrib import messages
from .generators.registry import registry
from works.models import Work

class LaTeXGeneratorAdmin:
    """Админка для управления LaTeX генераторами"""
    
    def __init__(self, admin_site):
        self.admin_site = admin_site
    
    def get_urls(self):
        urls = [
            path('latex-generator/', self.admin_site.admin_view(self.generate_view), name='latex_generator_generate'),
        ]
        return urls
    
    def generate_view(self, request):
        """Представление для генерации документов"""
        if request.method == 'POST':
            doc_type = request.POST.get('type')
            object_id = request.POST.get('object_id')
            output_format = request.POST.get('format', 'pdf')
            with_answers = request.POST.get('with_answers') == 'on'
            
            try:
                generator_class = registry.get_generator(doc_type)
                
                if doc_type == 'work':
                    work = Work.objects.get(pk=object_id)
                    generator = generator_class(output_dir='latex_output')
                    
                    if with_answers:
                        files = generator.generate_with_answers(work, output_format)
                    else:
                        files = generator.generate(work, output_format)
                    
                    messages.success(request, f'Документ создан: {", ".join(files)}')
                
            except Exception as e:
                messages.error(request, f'Ошибка генерации: {e}')
            
            return HttpResponseRedirect(request.path)
        
        # GET запрос - показываем форму
        context = {
            'title': 'Генерация LaTeX документов',
            'available_generators': registry.get_available_types(),
            'works': Work.objects.all()[:10],  # Показываем первые 10 работ
        }
        
        return render(request, 'admin/latex_generator/generate.html', context)

# ВРЕМЕННО УБИРАЕМ РЕГИСТРАЦИЮ АДМИНКИ
# admin.site.register(LaTeXGeneratorProxy, LaTeXGeneratorAdmin)

```

// FILE: apps.py
```
from django.apps import AppConfig

class LatexGeneratorConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'latex_generator'
    verbose_name = 'LaTeX Generator'
    
    def ready(self):
        """Инициализация при запуске приложения"""
        pass

```

// FILE: combicode.txt
```

```

// FILE: generators/__init__.py
```
"""Экспорт генераторов"""

from .base import BaseLatexGenerator
from .work_generator import WorkLatexGenerator
from .registry import registry

__all__ = [
    'BaseLatexGenerator',
    'WorkLatexGenerator',
    'registry',
]

```

// FILE: generators/base.py
```
"""Базовый генератор LaTeX документов"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
from pathlib import Path
from django.template.loader import render_to_string
from latex_generator.utils import sanitize_filename, compile_latex_to_pdf

class BaseLatexGenerator(ABC):
    """Абстрактный базовый класс для генераторов LaTeX"""
    
    def __init__(self, output_dir: Path):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    @abstractmethod
    def get_template_name(self) -> str:
        """Возвращает имя шаблона для генерации"""
        pass
    
    @abstractmethod
    def prepare_context(self, source_object: Any) -> Dict[str, Any]:
        """Подготавливает контекст для рендеринга шаблона"""
        pass
    
    @abstractmethod
    def get_output_filename(self, source_object: Any) -> str:
        """Возвращает имя файла для сохранения"""
        pass
    
    def generate(self, source_object: Any, output_format: str = 'pdf') -> List[str]:
        """
        Генерирует LaTeX документ
        
        Args:
            source_object: Объект для генерации (Work, Report, etc.)
            output_format: 'latex' или 'pdf'
            
        Returns:
            Список путей к созданным файлам
        """
        # Подготавливаем контекст
        context = self.prepare_context(source_object)
        
        # Рендерим шаблон
        template_name = self.get_template_name()
        latex_content = render_to_string(template_name, context)
        
        # Сохраняем LaTeX файл
        filename = self.get_output_filename(source_object)
        latex_filename = sanitize_filename(filename)
        latex_file = self.output_dir / latex_filename
        
        with open(latex_file, 'w', encoding='utf-8') as f:
            f.write(latex_content)
        
        files = [str(latex_file)]
        
        # Компилируем в PDF если нужно
        if output_format == 'pdf':
            pdf_file = compile_latex_to_pdf(latex_file, self.output_dir)
            if pdf_file:
                files.append(str(pdf_file))
        
        return files

```

// FILE: generators/registry.py
```
"""Реестр генераторов LaTeX"""

from typing import Dict, Type
from .base import BaseLatexGenerator
from .work_generator import WorkLatexGenerator

class GeneratorRegistry:
    """Реестр всех доступных генераторов"""
    
    _generators: Dict[str, Type[BaseLatexGenerator]] = {
        'work': WorkLatexGenerator,
        # В будущем добавим:
        # 'report': ReportLatexGenerator,
        # 'certificate': CertificateLatexGenerator,
    }
    
    @classmethod
    def get_generator(cls, generator_type: str) -> Type[BaseLatexGenerator]:
        """Получить класс генератора по типу"""
        if generator_type not in cls._generators:
            available = ', '.join(cls._generators.keys())
            raise ValueError(f"Неизвестный тип генератора: {generator_type}. Доступные: {available}")
        
        return cls._generators[generator_type]
    
    @classmethod
    def get_available_types(cls) -> list:
        """Получить список доступных типов генераторов"""
        return list(cls._generators.keys())
    
    @classmethod
    def register_generator(cls, generator_type: str, generator_class: Type[BaseLatexGenerator]):
        """Зарегистрировать новый генератор"""
        cls._generators[generator_type] = generator_class

# Экземпляр для использования
registry = GeneratorRegistry()

```

// FILE: generators/work_generator.py
```
"""Генератор LaTeX для работ"""

from typing import Dict, Any
from latex_generator.utils import sanitize_latex, prepare_images
from .base import BaseLatexGenerator

class WorkLatexGenerator(BaseLatexGenerator):
    """Генератор LaTeX документов для работ"""
    
    def get_template_name(self) -> str:
        return 'latex/work/all_variants.tex'
    
    def get_output_filename(self, work) -> str:
        return f"{work.name}_all_variants.tex"
    
    def prepare_context(self, work) -> Dict[str, Any]:
        """Подготавливает контекст для работы"""
        
        # ИСПРАВЛЕНО: variants -> variant_set
        variants = work.variant_set.all().order_by('number')
        
        # Подготавливаем данные для каждого варианта
        all_variants_data = []
        for variant in variants:
            variant_data = self._prepare_variant_context(variant)
            all_variants_data.append(variant_data)
        
        return {
            'work': work,
            'work_name': sanitize_latex(work.name),
            'variants': all_variants_data,
            'total_variants': len(all_variants_data),
            'with_answers': getattr(self, '_with_answers', False),
        }
    
    def _prepare_variant_context(self, variant):
        """Подготавливает контекст для одного варианта"""
        tasks = variant.tasks.all().order_by('id')  # Детерминированный порядок
        
        # Подготавливаем задания с изображениями
        prepared_tasks = []
        for i, task in enumerate(tasks, 1):
            task_data = {
                'number': i,
                'task': task,
                'text': sanitize_latex(task.text),
                'answer': sanitize_latex(task.answer),
                'images': []
            }
            
            # Подготавливаем изображения
            for image in task.images.all().order_by('order'):
                image_data = prepare_images(image, self.output_dir)
                if image_data:
                    task_data['images'].append(image_data)
            
            prepared_tasks.append(task_data)
        
        return {
            'variant': variant,
            'tasks': prepared_tasks,
            'total_tasks': len(prepared_tasks),
        }
    
    def generate_with_answers(self, work, output_format='pdf'):
        """Генерирует работу с ответами"""
        self._with_answers = True
        try:
            return self.generate(work, output_format)
        finally:
            self._with_answers = False

```

// FILE: management/commands/generate_latex.py
```
"""Универсальная команда для генерации LaTeX документов"""

from pathlib import Path
from django.core.management.base import BaseCommand, CommandError
from django.apps import apps

from latex_generator.generators.registry import registry

class Command(BaseCommand):
    help = 'Универсальная генерация LaTeX документов'
    
    def add_arguments(self, parser):
        parser.add_argument(
            'type', 
            choices=registry.get_available_types(),
            help='Тип документа для генерации'
        )
        parser.add_argument('object_id', type=int, help='ID объекта для генерации')
        parser.add_argument(
            '--format',
            choices=['latex', 'pdf'],
            default='pdf',
            help='Формат вывода: latex или pdf'
        )
        parser.add_argument(
            '--output-dir',
            default='latex_output',
            help='Папка для сохранения файлов'
        )
        parser.add_argument(
            '--with-answers',
            action='store_true',
            help='Включить ответы (для работ)'
        )
    
    def handle(self, *args, **options):
        doc_type = options['type']
        object_id = options['object_id']
        output_format = options['format']
        output_dir = Path(options['output_dir'])
        with_answers = options['with_answers']
        
        # Получаем класс генератора
        generator_class = registry.get_generator(doc_type)
        
        # Получаем объект для генерации
        try:
            model_class = self._get_model_class(doc_type)
            obj = model_class.objects.get(pk=object_id)
        except model_class.DoesNotExist:
            raise CommandError(f'{doc_type.title()} с ID {object_id} не найден')
        
        # Создаем генератор
        generator = generator_class(output_dir)
        
        # Выводим информацию
        self.stdout.write(f'🚀 Генерация {doc_type} для: {obj}')
        if doc_type == 'work':
            # ИСПРАВЛЕНО: variants -> variant_set
            variants_count = obj.variant_set.count()
            if variants_count == 0:
                raise CommandError('У работы нет вариантов. Сначала сгенерируйте варианты.')
            self.stdout.write(f'📋 Найдено вариантов: {variants_count}')
        
        # Генерируем документ
        try:
            if doc_type == 'work' and with_answers:
                files = generator.generate_with_answers(obj, output_format)
            else:
                files = generator.generate(obj, output_format)
            
            self.stdout.write(
                self.style.SUCCESS(f'🎉 Готово! Создано файлов: {len(files)}')
            )
            
            for file_path in files:
                self.stdout.write(f'  📄 {file_path}')
                
        except Exception as e:
            raise CommandError(f'Ошибка при генерации: {e}')
    
    def _get_model_class(self, doc_type):
        """Получить класс модели по типу документа"""
        model_mapping = {
            'work': 'works.Work',
            # В будущем добавим:
            # 'report': 'reports.Report',
        }
        
        if doc_type not in model_mapping:
            raise CommandError(f'Неизвестный тип документа: {doc_type}')
        
        app_label, model_name = model_mapping[doc_type].split('.')
        return apps.get_model(app_label, model_name)

```

// FILE: management/commands/list_generators.py
```
"""Команда для просмотра доступных генераторов"""

from django.core.management.base import BaseCommand
from latex_generator.generators.registry import registry

class Command(BaseCommand):
    help = 'Показать список доступных генераторов LaTeX'
    
    def handle(self, *args, **options):
        self.stdout.write('📋 Доступные генераторы LaTeX:')
        
        for generator_type in registry.get_available_types():
            generator_class = registry.get_generator(generator_type)
            self.stdout.write(f'  • {generator_type}: {generator_class.__name__}')
        
        self.stdout.write('\n💡 Использование:')
        self.stdout.write('  python manage.py generate_latex <тип> <id> [опции]')
        self.stdout.write('\n🔧 Примеры:')
        self.stdout.write('  python manage.py generate_latex work 1 --format pdf')
        self.stdout.write('  python manage.py generate_latex work 1 --with-answers')

```

// FILE: migrations/__init__.py
```

```

// FILE: models.py
```
from django.db import models

# Create your models here.

```

// FILE: templates/admin/latex_generator/generate.html
```
{% extends "admin/base_site.html" %}
{% load i18n %}

{% block title %}Генерация LaTeX документов{% endblock %}

{% block content_title %}
    <h1>Генерация LaTeX документов</h1>
{% endblock %}

{% block content %}
<div class="module filtered">
    <form method="post">
        {% csrf_token %}
        
        <div class="form-row">
            <div class="field-box">
                <label for="type">Тип документа:</label>
                <select name="type" id="type" required>
                    {% for generator_type in available_generators %}
                        <option value="{{ generator_type }}">{{ generator_type|capfirst }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
        
        <div class="form-row">
            <div class="field-box">
                <label for="object_id">Объект:</label>
                <select name="object_id" id="object_id" required>
                    {% for work in works %}
                        <option value="{{ work.id }}">{{ work.name }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
        
        <div class="form-row">
            <div class="field-box">
                <label for="format">Формат:</label>
                <select name="format" id="format">
                    <option value="pdf">PDF</option>
                    <option value="latex">LaTeX</option>
                </select>
            </div>
        </div>
        
        <div class="form-row">
            <div class="field-box">
                <label for="with_answers">
                    <input type="checkbox" name="with_answers" id="with_answers">
                    Включить ответы
                </label>
            </div>
        </div>
        
        <div class="submit-row">
            <input type="submit" value="Генерировать" class="default">
        </div>
    </form>
</div>
{% endblock %}

```

// FILE: templates/latex/base/document_base.tex
```
{% comment %}
Базовый шаблон для LaTeX документов
{% endcomment %}

\documentclass[12pt,a4paper]{article}

% Пакеты для русского языка
\usepackage[utf8]{inputenc}
\usepackage[T2A]{fontenc}
\usepackage[russian]{babel}

% Пакеты для форматирования
\usepackage[margin=2cm]{geometry}
\usepackage{amsmath, amsfonts, amssymb}
\usepackage{graphicx}
\usepackage{enumitem}
\usepackage{titlesec}
\usepackage{fancyhdr}

% Настройка заголовков
\titleformat{\section}{\large\bfseries}{\thesection.}{1em}{}
\titleformat{\subsection}{\normalsize\bfseries}{\thesubsection.}{1em}{}

% Настройка колонтитулов
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{ {% block header_left %}{% endblock %} }
\fancyhead[R]{ {% block header_right %}\thepage{% endblock %} }
\fancyfoot[C]{ {% block footer_center %}{% endblock %} }

% Настройка отступов
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt}

\begin{document}

{% block content %}
{% endblock %}

\end{document}

```

// FILE: templates/latex/work/all_variants.tex
```
\documentclass[12pt,a4paper]{article}

% Пакеты для русского языка
\usepackage[utf8]{inputenc}
\usepackage[T2A]{fontenc}
\usepackage[russian]{babel}

% Пакеты для форматирования
\usepackage[margin=2cm]{geometry}
\usepackage{amsmath, amsfonts, amssymb}
\usepackage{graphicx}
\usepackage{enumitem}
\usepackage{titlesec}
\usepackage{fancyhdr}

% Настройка заголовков
\titleformat{\section}{\large\bfseries}{\thesection.}{1em}{}
\titleformat{\subsection}{\normalsize\bfseries}{\thesubsection.}{1em}{}

% Настройка колонтитулов
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{ {{work_name}} }
\fancyhead[R]{\thepage}
\fancyfoot[C]{Всего вариантов: {{ total_variants }}}

% Настройка отступов
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt}

\begin{document}

% Титульный лист
\begin{center}
    {\LARGE\bfseries {{ work_name }} }\\[0.8cm]
    {% if work.duration %}
    {\large Время выполнения: {{ work.duration }} минут}\\[0.4cm]
    {% endif %}
    {\large Количество вариантов: {{ total_variants }}}\\[0.3cm]
    {\normalsize \today}
\end{center}

\vspace{1cm}

% Общая инструкция
{\small\textit{%
Внимательно прочитайте задания и дайте развернутые ответы. \\
Показывайте ход решения. Каждый вариант начинается с новой страницы.
}}

\newpage

% Перебираем все варианты
{% for variant_data in variants %}

% Заголовок варианта
\begin{center}
    {\Large\bfseries Вариант {{ variant_data.variant.number }} }
\end{center}

\vspace{0.8cm}

% Задания варианта
{% for task_data in variant_data.tasks %}
\section*{Задание {{ task_data.number }}}

{{ task_data.text }}

{% comment %}
TODO: Здесь будет обработка изображений после Step 4
{% for image in task_data.images %}
    % Обработка изображений
{% endfor %}
{% endcomment %}

\vspace{1cm}

{% endfor %}

% Новая страница для следующего варианта (кроме последнего)
{% if not forloop.last %}
\newpage
{% endif %}

{% endfor %}

{% if with_answers %}
\newpage
% Лист ответов
\section*{\centering ОТВЕТЫ}

{% for variant_data in variants %}
\subsection*{Вариант {{ variant_data.variant.number }}}

\begin{enumerate}
{% for task_data in variant_data.tasks %}
\item {{ task_data.answer }}
{% endfor %}
\end{enumerate}

{% if not forloop.last %}\vspace{0.5cm}{% endif %}

{% endfor %}
{% endif %}

\end{document}

```

// FILE: templates/latex/work/work_all_variants.tex
```
\documentclass[12pt,a4paper]{article}

% Пакеты для русского языка
\usepackage[utf8]{inputenc}
\usepackage[T2A]{fontenc}
\usepackage[russian]{babel}

% Пакеты для форматирования
\usepackage[margin=2cm]{geometry}
\usepackage{amsmath, amsfonts, amssymb}
\usepackage{graphicx}
\usepackage{wrapfig}
\usepackage{enumitem}
\usepackage{titlesec}
\usepackage{fancyhdr}

% Настройка заголовков
\titleformat{\section}{\large\bfseries}{\thesection.}{1em}{}
\titleformat{\subsection}{\normalsize\bfseries}{\thesubsection.}{1em}{}

% Настройка колонтитулов
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{ {{ work_name }} }
\fancyhead[R]{\thepage}
\fancyfoot[C]{Всего вариантов: {{ total_variants }}}

% Настройка отступов
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt}

\begin{document}

% Титульный лист
\begin{center}
    {\LARGE\bfseries {{ work_name }} }\\[0.8cm]
    {% if work.duration %}
    {\large Время выполнения: {{ work.duration }} минут}\\[0.4cm]
    {% endif %}
    {\large Количество вариантов: {{ total_variants }}}\\[0.3cm]
    {\normalsize \today}
\end{center}

\vspace{1cm}

% Общая инструкция
{\small\textit{%
Внимательно прочитайте задания и дайте развернутые ответы. \\
Показывайте ход решения. Каждый вариант начинается с новой страницы.
}}

\newpage

% Перебираем все варианты
{% for variant_data in variants %}

% Заголовок варианта
\begin{center}
    {\Large\bfseries Вариант {{ variant_data.variant.number }} }
\end{center}

\vspace{0.8cm}

% Задания варианта
{% for task_data in variant_data.tasks %}
\section*{Задание {{ task_data.number }}}

{{ task_data.text }}

{% for image in task_data.images %}
    {% if image.latex_position.placement == 'figure' %}
    \begin{figure}[h]
        \centering
        \includegraphics[width={{ image.latex_position.width }}]{ {{ image.filename }} }
        {% if image.caption %}
        \caption{ {{ image.caption }} }
        {% endif %}
    \end{figure}
    {% elif image.latex_position.placement == 'wrapfigure' %}
    \begin{wrapfigure}{ {{ image.latex_position.align }} }{ {{ image.latex_position.width }} }
        \centering
        \includegraphics[width={{ image.latex_position.width }}]{ {{ image.filename }} }
        {% if image.caption %}
        \caption{ {{ image.caption }} }
        {% endif %}
    \end{wrapfigure}
    {% endif %}
{% endfor %}

\vspace{1cm}

{% endfor %}

% Новая страница для следующего варианта (кроме последнего)
{% if not forloop.last %}
\newpage
{% endif %}

{% endfor %}

{% if with_answers %}
\newpage
% Лист ответов
\section*{\centering ОТВЕТЫ}

{% for variant_data in variants %}
\subsection*{Вариант {{ variant_data.variant.number }}}

\begin{enumerate}
{% for task_data in variant_data.tasks %}
\item {{ task_data.answer }}
{% endfor %}
\end{enumerate}

{% if not forloop.last %}\vspace{0.5cm}{% endif %}

{% endfor %}
{% endif %}

\end{document}

```

// FILE: tests/__init__.py
```

```

// FILE: tests/test_basic.py
```
"""Базовые тесты для проверки утилит"""

from django.test import TestCase
from latex_generator.utils import sanitize_latex, sanitize_filename

class BasicUtilsTest(TestCase):
    """Базовые тесты утилит"""
    
    def test_sanitize_latex_basic(self):
        """Тест базового экранирования"""
        result = sanitize_latex("Простой текст")
        self.assertEqual(result, "Простой текст")
        
        result = sanitize_latex("Цена $5 & скидка 10%")
        self.assertEqual(result, "Цена \\$5 \\& скидка 10\\%")
    
    def test_sanitize_filename_basic(self):
        """Тест очистки имен файлов"""
        result = sanitize_filename("test_file.tex")
        self.assertEqual(result, "test_file.tex")
        
        result = sanitize_filename("file<>*.tex")
        self.assertEqual(result, "file___.tex")

```

// FILE: tests.py
```
from django.test import TestCase

# Create your tests here.

```

// FILE: urls.py
```
from django.urls import path
from . import views

app_name = 'latex_generator'

urlpatterns = [
    # Временно убираем URL'ы
    # path('generate/', views.GenerateView.as_view(), name='generate'),
    # path('status/', views.StatusView.as_view(), name='status'),
]

```

// FILE: utils/__init__.py
```
"""Экспорт основных утилит"""

from .latex_utils import sanitize_latex, sanitize_filename
from .image_utils import prepare_images
from .compilation import compile_latex_to_pdf

__all__ = [
    'sanitize_latex',
    'sanitize_filename', 
    'prepare_images',
    'compile_latex_to_pdf',
]
```

// FILE: utils/compilation.py
```
"""Утилиты для компиляции LaTeX в PDF"""

import os
import subprocess
from pathlib import Path

def compile_latex_to_pdf(latex_file, output_dir):
    """Компилирует LaTeX файл в PDF"""
    try:
        # Меняем рабочую директорию для pdflatex
        old_cwd = os.getcwd()
        os.chdir(output_dir)
        
        # Запускаем pdflatex дважды (для правильных ссылок)
        for i in range(2):
            result = subprocess.run([
                'pdflatex', 
                '-interaction=nonstopmode',
                '-halt-on-error',
                latex_file.name
            ], capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode != 0:
                print(f"❌ Ошибка компиляции LaTeX (проход {i+1}):")
                print(result.stderr)
                print("Лог компиляции:")
                print(result.stdout[-1000:])  # Последние 1000 символов лога
                os.chdir(old_cwd)
                return None
        
        os.chdir(old_cwd)
        
        pdf_file = latex_file.with_suffix('.pdf')
        return pdf_file if pdf_file.exists() else None
            
    except FileNotFoundError:
        print("❌ pdflatex не найден. Установите TeX Live:")
        print("sudo apt-get install texlive-latex-extra texlive-lang-cyrillic")
        return None
    except Exception as e:
        print(f"❌ Ошибка при компиляции: {e}")
        return None

```

// FILE: utils/image_utils.py
```
"""Утилиты для обработки изображений в LaTeX"""

import shutil
from pathlib import Path
from django.conf import settings
from .latex_utils import sanitize_latex

def prepare_images(task_image, output_dir):
    """Подготавливает изображение для LaTeX"""
    try:
        # Путь к оригинальному изображению
        if hasattr(task_image.image, 'path'):
            original_path = Path(task_image.image.path)
        else:
            # Если путь относительный
            original_path = Path(settings.MEDIA_ROOT) / task_image.image.name
        
        if not original_path.exists():
            print(f"⚠️ Изображение не найдено: {original_path}")
            return None
        
        # Копируем изображение в папку вывода
        image_filename = f"image_{task_image.task.id}_{task_image.id}{original_path.suffix}"
        dest_path = output_dir / image_filename
        shutil.copy2(original_path, dest_path)
        
        return {
            'filename': image_filename,
            'caption': sanitize_latex(task_image.caption or ''),
            'position': task_image.position,
            'order': task_image.order,
        }
        
    except Exception as e:
        print(f"⚠️ Ошибка при подготовке изображения {task_image.id}: {e}")
        return None

```

// FILE: utils/latex_utils.py
```
"""LaTeX утилиты для экранирования и форматирования"""

import re

def sanitize_latex(text):
    """Экранирует специальные символы LaTeX"""
    if not text:
        return ''
    
    # Словарь замен для LaTeX
    replacements = {
        '\\': r'\textbackslash{}',
        '{': r'\{',
        '}': r'\}',
        '$': r'\$',
        '&': r'\&',
        '%': r'\%',
        '#': r'\#',
        '^': r'\textasciicircum{}',
        '_': r'\_',
        '~': r'\textasciitilde{}',
        '<': r'\textless{}',
        '>': r'\textgreater{}',
    }
    
    # Применяем замены
    result = text
    for char, replacement in replacements.items():
        result = result.replace(char, replacement)
    
    # Обрабатываем переносы строк
    result = result.replace('\n', '\\\\ ')
    
    return result

def sanitize_filename(filename):
    """Очищает имя файла от недопустимых символов"""
    # Убираем недопустимые символы
    clean = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # Убираем лишние пробелы
    clean = re.sub(r'\s+', '_', clean)
    return clean

```

// FILE: views.py
```
from django.shortcuts import render
from django.views.generic import TemplateView

class GenerateView(TemplateView):
    """Представление для генерации документов"""
    template_name = 'latex_generator/generate.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Генерация LaTeX документов'
        return context

class StatusView(TemplateView):
    """Представление статуса генерации"""
    template_name = 'latex_generator/status.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Статус генерации'
        return context

```

