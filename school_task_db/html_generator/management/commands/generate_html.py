"""–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

from django.core.management.base import BaseCommand, CommandError
from django.apps import apps
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤'

    def add_arguments(self, parser):
        # –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        parser.add_argument(
            'object_type',
            choices=['work'],
            help='–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (work)'
        )
        
        # ID –æ–±—ä–µ–∫—Ç–∞
        parser.add_argument(
            'object_id',
            type=int,
            help='ID –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
        )
        
        # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ HTML)
        parser.add_argument(
            '--format',
            choices=['html'],
            default='html',
            help='–§–æ—Ä–º–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: html)'
        )
        
        # –° –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–ª–∏ –±–µ–∑
        parser.add_argument(
            '--with-answers',
            action='store_true',
            help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç'
        )
        
        # –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        parser.add_argument(
            '--output-dir',
            default='html_output',
            help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: html_output)'
        )

    def handle(self, *args, **options):
        object_type = options['object_type']
        object_id = options['object_id']
        output_format = options['format']
        with_answers = options['with_answers']
        output_dir = options['output_dir']

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞
            if object_type == 'work':
                Work = apps.get_model('works', 'Work')
                obj = Work.objects.get(id=object_id)
                
                from html_generator.generators.work_generator import WorkHtmlGenerator
                generator = WorkHtmlGenerator(output_dir=output_dir)
                
                self.stdout.write(
                    f"üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {object_type} –¥–ª—è: [{obj.get_short_uuid()}] {obj.name}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                variants_count = obj.variant_set.count()
                self.stdout.write(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {variants_count}")
                
                if variants_count == 0:
                    raise CommandError(f"–£ —Ä–∞–±–æ—Ç—ã {obj.name} –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
                if with_answers:
                    files = generator.generate_with_answers(obj)
                else:
                    files = generator.generate(obj)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º—É–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context = generator.prepare_context(obj)
                
                if context.get('has_formula_errors'):
                    self.stdout.write(
                        self.style.WARNING(
                            f"–†–∞–±–æ—Ç–∞ {obj.name} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö: {context['formula_errors']}"
                        )
                    )
                
                if context.get('has_formula_warnings'):
                    self.stdout.write(
                        self.style.WARNING(
                            f"–†–∞–±–æ—Ç–∞ {obj.name} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö: {context['formula_warnings']}"
                        )
                    )
            
            else:
                raise CommandError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {object_type}")

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.stdout.write("üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {}".format(len(files)))
            for file_path in files:
                self.stdout.write(f"  üìÑ {file_path}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ HTML —Ñ–∞–π–ª–µ
                if file_path.endswith('.html'):
                    html_path = Path(file_path)
                    if html_path.exists():
                        file_size = html_path.stat().st_size / 1024  # KB
                        self.stdout.write(f"     –†–∞–∑–º–µ—Ä: {file_size:.1f} KB")

        except Work.DoesNotExist:
            raise CommandError(f"–†–∞–±–æ—Ç–∞ —Å ID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –¥–ª—è {object_type} {object_id}: {e}")
            raise CommandError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
