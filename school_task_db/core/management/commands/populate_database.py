"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
"""

import random
import json
from datetime import datetime, timedelta
from pathlib import Path
from django.core.management.base import BaseCommand
from django.db import transaction
from django.contrib.auth.models import User
from django.utils import timezone

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
from references.models import SimpleReference, SubjectReference
from curriculum.models import Topic, SubTopic, Course, CourseAssignment
from tasks.models import Task, TaskImage
from task_groups.models import AnalogGroup, TaskGroup
from works.models import Work, WorkAnalogGroup, Variant
from students.models import Student, StudentGroup
from events.models import Event, EventParticipation, Mark
from review.models import ReviewSession, ReviewComment

class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∫–æ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã'

    def add_arguments(self, parser):
        parser.add_argument('--clear', action='store_true', help='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ')
        parser.add_argument('--size', choices=['small', 'medium', 'large'], default='medium', 
                          help='–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        parser.add_argument('--export-json', type=str, help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª')

    def handle(self, *args, **options):
        if options['clear']:
            self.clear_database()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        sizes = {
            'small': {'students': 30, 'tasks': 100, 'works': 5},
            'medium': {'students': 150, 'tasks': 500, 'works': 20}, 
            'large': {'students': 500, 'tasks': 2000, 'works': 50}
        }
        
        self.size_config = sizes[options['size']]
        
        with transaction.atomic():
            self.stdout.write(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ {options['size']} –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ—Ä—è–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self.create_references()
            self.create_curriculum()  
            self.create_tasks()
            self.create_task_groups()
            self.create_works()
            self.create_students()
            self.create_courses()
            self.create_events()
            self.create_reviews()
            
            self.stdout.write(self.style.SUCCESS("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞!"))
            
            if options['export_json']:
                self.export_to_json(options['export_json'])

    def clear_database(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ—Ä—è–¥–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è (–æ–±—Ä–∞—Ç–Ω—ã–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º)
        models_to_clear = [
            ReviewSession, ReviewComment, Mark, 
            EventParticipation, Event,
            CourseAssignment, Course,
            Variant, WorkAnalogGroup, Work,
            TaskGroup, AnalogGroup,
            TaskImage, Task,
            SubTopic, Topic,
            StudentGroup, Student,
            SubjectReference, SimpleReference
        ]
        
        for model in models_to_clear:
            count = model.objects.count()
            if count > 0:
                model.objects.all().delete()
                self.stdout.write(f"   –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π {model.__name__}")

    def create_references(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        self.stdout.write("üìö –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        references = {
            'subjects': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n–§–∏–∑–∏–∫–∞\n–•–∏–º–∏—è\n–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n–ë–∏–æ–ª–æ–≥–∏—è',
            'task_types': '–†–∞—Å—á—ë—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞\n–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞\n–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å\n–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            'difficulty_levels': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π\n–ë–∞–∑–æ–≤—ã–π\n–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π\n–í—ã—Å–æ–∫–∏–π\n–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π',
            'cognitive_levels': '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n–ü–æ–Ω–∏–º–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n–ê–Ω–∞–ª–∏–∑\n–û—Ü–µ–Ω–∫–∞\n–°–æ–∑–¥–∞–Ω–∏–µ',
            'work_types': '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞\n–≠–∫–∑–∞–º–µ–Ω\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ',
            'comment_categories': '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞\n–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è\n–¢–∏–ø–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'
        }
        
        for category, items_text in references.items():
            SimpleReference.objects.get_or_create(
                category=category,
                defaults={'items_text': items_text}
            )
        
        # –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        math_content = """1.1|–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
1.2|–û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –¥—Ä–æ–±–∏  
1.3|–î–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏
2.1|–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
2.2|–£—Ä–∞–≤–Ω–µ–Ω–∏—è
2.3|–ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
3.1|–§—É–Ω–∫—Ü–∏–∏ –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞
3.2|–ì—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
4.1|–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã
4.2|–ü–ª–æ—â–∞–¥–∏ –∏ –æ–±—ä–µ–º—ã"""

        physics_content = """1.1|–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
1.2|–°–∏–ª—ã –≤ –ø—Ä–∏—Ä–æ–¥–µ
1.3|–ó–∞–∫–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
2.1|–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞
2.2|–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞
3.1|–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —è–≤–ª–µ–Ω–∏—è
3.2|–ú–∞–≥–Ω–∏—Ç–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è"""

        SubjectReference.objects.get_or_create(
            subject='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            grade_level='7-11',
            category='content_elements',
            defaults={'items_text': math_content}
        )
        
        SubjectReference.objects.get_or_create(
            subject='–§–∏–∑–∏–∫–∞', 
            grade_level='7-11',
            category='content_elements',
            defaults={'items_text': physics_content}
        )

    def create_curriculum(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        self.stdout.write("üéì –°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        
        # –¢–µ–º—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
        math_topics_data = [
            (7, '–ê–ª–≥–µ–±—Ä–∞', [
                ('–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è', ['–û–¥–Ω–æ—á–ª–µ–Ω—ã', '–ú–Ω–æ–≥–æ—á–ª–µ–Ω—ã', '–§–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è']),
                ('–õ–∏–Ω–µ–π–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è', ['–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π', '–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏', '–°–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π']),
                ('–§—É–Ω–∫—Ü–∏–∏', ['–õ–∏–Ω–µ–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è', '–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏', '–û–±–ª–∞—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'])
            ]),
            (8, '–ê–ª–≥–µ–±—Ä–∞', [
                ('–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–æ—Ä–Ω–∏', ['–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å', '–°–≤–æ–π—Å—Ç–≤–∞ –∫–æ—Ä–Ω–µ–π', '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è']),
                ('–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è', ['–§–æ—Ä–º—É–ª–∞ –∫–æ—Ä–Ω–µ–π', '–¢–µ–æ—Ä–µ–º–∞ –í–∏–µ—Ç–∞', '–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ']),
                ('–ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞', ['–õ–∏–Ω–µ–π–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞', '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞', '–°–∏—Å—Ç–µ–º—ã –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤'])
            ]),
            (9, '–ê–ª–≥–µ–±—Ä–∞', [
                ('–§—É–Ω–∫—Ü–∏–∏ –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞', ['–û–±–ª–∞—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è', '–ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å', '–≠–∫—Å—Ç—Ä–µ–º—É–º—ã']),
                ('–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏', ['–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è', '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è', '–°—É–º–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏']),
                ('–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è', ['–°–∏–Ω—É—Å –∏ –∫–æ—Å–∏–Ω—É—Å', '–û—Å–Ω–æ–≤–Ω–æ–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Ç–æ–∂–¥–µ—Å—Ç–≤–æ', '–§–æ—Ä–º—É–ª—ã –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è'])
            ]),
            (7, '–ì–µ–æ–º–µ—Ç—Ä–∏—è', [
                ('–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏', ['–ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞', '–†–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫']),
                ('–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä—è–º—ã–µ', ['–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏', '–°–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä—è–º—ã—Ö', '–£–≥–ª—ã –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö'])
            ]),
            (8, '–ì–µ–æ–º–µ—Ç—Ä–∏—è', [
                ('–ß–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏', ['–ü–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º', '–†–æ–º–±', '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', '–ö–≤–∞–¥—Ä–∞—Ç', '–¢—Ä–∞–ø–µ—Ü–∏—è']),
                ('–ü–ª–æ—â–∞–¥—å', ['–ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞', '–ü–ª–æ—â–∞–¥—å –ø–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º–∞', '–ü–ª–æ—â–∞–¥—å —Ç—Ä–∞–ø–µ—Ü–∏–∏'])
            ])
        ]
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã  
        physics_topics_data = [
            (7, '–ú–µ—Ö–∞–Ω–∏–∫–∞', [
                ('–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ', ['–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ', '–°–∫–æ—Ä–æ—Å—Ç—å', '–ü—É—Ç—å –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ']),
                ('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–ª', ['–°–∏–ª–∞', '–ú–∞—Å—Å–∞', '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', '–°–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏'])
            ]),
            (8, '–¢–µ–ø–ª–æ–≤—ã–µ —è–≤–ª–µ–Ω–∏—è', [
                ('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è', ['–°–ø–æ—Å–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —ç–Ω–µ—Ä–≥–∏–∏', '–¢–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å', '–ö–æ–Ω–≤–µ–∫—Ü–∏—è']),
                ('–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π', ['–ü–ª–∞–≤–ª–µ–Ω–∏–µ', '–ü–∞—Ä–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–£–¥–µ–ª—å–Ω–∞—è —Ç–µ–ø–ª–æ—Ç–∞'])
            ])
        ]
        
        self.topics = {}
        
        for grade, section, topics_list in math_topics_data + physics_topics_data:
            subject = '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' if section in ['–ê–ª–≥–µ–±—Ä–∞', '–ì–µ–æ–º–µ—Ç—Ä–∏—è'] else '–§–∏–∑–∏–∫–∞'
            
            for topic_name, subtopic_names in topics_list:
                topic = Topic.objects.create(
                    name=topic_name,
                    subject=subject,
                    section=section,
                    grade_level=grade,
                    order=len(self.topics) + 1,
                    description=f"–ò–∑—É—á–µ–Ω–∏–µ {topic_name.lower()} –≤ {grade} –∫–ª–∞—Å—Å–µ"
                )
                
                self.topics[f"{subject}_{grade}_{topic_name}"] = topic
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ç–µ–º—ã
                for i, subtopic_name in enumerate(subtopic_names, 1):
                    SubTopic.objects.create(
                        topic=topic,
                        name=subtopic_name,
                        order=i,
                        description=f"–ü–æ–¥—Ç–µ–º–∞: {subtopic_name}"
                    )

    def create_tasks(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
        self.stdout.write("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π...")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω—ã
        topics_count = len(self.topics)
        if topics_count == 0:
            self.stdout.write("   ‚ùå –¢–µ–º—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            self.tasks = []
            return
        
        self.stdout.write(f"   –î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–º: {topics_count}")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π (–±—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
        task_templates = [
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
            {
                'templates': [
                    "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${}x + {} = {}$",
                    "–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: $({})^2 - {} \\cdot {} + {}$",
                    "–£–ø—Ä–æ—Å—Ç–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: $\\frac{{{}x + {}}}{{{}x - {}}}$",
                    "–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ $y = {}x + {}$ –∏ –Ω–∞–π–¥–∏—Ç–µ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –æ—Å—è–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
                    "–ù–∞–π–¥–∏—Ç–µ –∫–æ—Ä–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: ${}x^2 + {}x + {} = 0$"
                ],
                'subject': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                'answer_templates': [
                    "x = {}",
                    "–û—Ç–≤–µ—Ç: {}",
                    "$\\frac{{{}}}{{{}}}$",
                    "–¢–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: ({}, 0) –∏ (0, {})",
                    "$x_1 = {}, x_2 = {}$"
                ]
            },
            # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è  
            {
                'templates': [
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–≤–∏–∂–µ—Ç—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {} –º/—Å. –ö–∞–∫–æ–π –ø—É—Ç—å –æ–Ω –ø—Ä–æ–π–¥–µ—Ç –∑–∞ {} —Å–µ–∫—É–Ω–¥?",
                    "–¢–µ–ª–æ –º–∞—Å—Å–æ–π {} –∫–≥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –æ–ø–æ—Ä—É —Å —Å–∏–ª–æ–π {} –ù. –ù–∞–π–¥–∏—Ç–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è.",
                    "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—â–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –º–∞—Å—Å–∞ —Ç–µ–ª–∞ {} –≥, –∞ –æ–±—ä–µ–º {} —Å–º¬≥",
                    "–ü—Ä–∏ –Ω–∞–≥—Ä–µ–≤–∞–Ω–∏–∏ {} –≥ –≤–æ–¥—ã –æ—Ç {}¬∞C –¥–æ {}¬∞C –∑–∞—Ç—Ä–∞—á–µ–Ω–æ {} –î–∂ —ç–Ω–µ—Ä–≥–∏–∏. –ù–∞–π–¥–∏—Ç–µ —É–¥–µ–ª—å–Ω—É—é —Ç–µ–ø–ª–æ–µ–º–∫–æ—Å—Ç—å –≤–æ–¥—ã.",
                    "–ù–∞–π–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ø–ª–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–ª–∞–≤–ª–µ–Ω–∏—è {} –∫–≥ –ª—å–¥–∞ –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –ø–ª–∞–≤–ª–µ–Ω–∏—è"
                ],
                'subject': '–§–∏–∑–∏–∫–∞', 
                'answer_templates': [
                    "s = {} –º",
                    "g = {} –º/—Å¬≤", 
                    "œÅ = {} –≥/—Å–º¬≥",
                    "c = {} –î–∂/(–∫–≥¬∑¬∞C)",
                    "Q = {} –∫–î–∂"
                ]
            }
        ]
        
        self.tasks = []
        tasks_count = self.size_config['tasks']
        successful_tasks = 0
        failed_tasks = 0
        
        for i in range(tasks_count):
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ —à–∞–±–ª–æ–Ω
                subject_data = random.choice(task_templates)
                template = random.choice(subject_data['templates'])
                answer_template = random.choice(subject_data['answer_templates'])
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                suitable_topics = [t for t in self.topics.values() 
                                if t.subject == subject_data['subject']]
                
                if not suitable_topics:
                    self.stdout.write(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ–º –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_data['subject']}")
                    failed_tasks += 1
                    continue
                    
                topic = random.choice(suitable_topics)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
                if not topic or not topic.pk:
                    self.stdout.write(f"   ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–∞: {topic}")
                    failed_tasks += 1
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ç–µ–º—É (50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
                subtopic = None
                if random.random() < 0.5:
                    subtopics = list(topic.subtopics.all())
                    if subtopics:
                        subtopic = random.choice(subtopics)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                params = [random.randint(1, 20) for _ in range(template.count('{}'))]
                answer_params = [random.randint(1, 100) for _ in range(answer_template.count('{}'))]
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç
                try:
                    text = template.format(*params)
                    answer = answer_template.format(*answer_params)
                except IndexError:
                    # Fallback –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
                    text = template.replace('{}', str(random.randint(1, 10)))
                    answer = answer_template.replace('{}', str(random.randint(1, 100)))
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
                task = Task.objects.create(
                    text=text,
                    answer=answer,
                    topic=topic,
                    subtopic=subtopic,
                    task_type=random.choice(['computational', 'qualitative', 'theoretical', 'practical', 'test']),
                    difficulty=random.randint(1, 5),
                    cognitive_level=random.choice(['remember', 'understand', 'apply', 'analyze', 'evaluate']),
                    estimated_time=random.randint(3, 15),
                    content_element=f"{random.randint(1,4)}.{random.randint(1,5)}",
                    requirement_element=f"{random.randint(1,3)}.{random.randint(1,4)}"
                )
                
                # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if task and task.pk and task.topic:
                    self.tasks.append(task)
                    successful_tasks += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
                    if random.random() < 0.3:
                        task.short_solution = f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É –∏ –ø–æ–ª—É—á–∞–µ–º {answer}"
                        task.full_solution = f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ\n2. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º—É–ª—É\n3. –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {answer}"
                        task.save()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É (20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å) 
                    if random.random() < 0.2:
                        task.hint = f"–í—Å–ø–æ–º–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –ø–æ —Ç–µ–º–µ '{topic.name}'"
                        task.save()
                else:
                    self.stdout.write(f"   ‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    failed_tasks += 1
                    
            except Exception as e:
                self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è {i+1}: {e}")
                failed_tasks += 1
                continue
                
            if (successful_tasks + failed_tasks) % 100 == 0:
                self.stdout.write(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_tasks + failed_tasks}, —É—Å–ø–µ—à–Ω–æ: {successful_tasks}")
        
        self.stdout.write(f"   ‚úÖ –ó–∞–¥–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {successful_tasks}")
        self.stdout.write(f"   ‚ùå –ó–∞–¥–∞–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏: {failed_tasks}")


    def create_task_groups(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        self.stdout.write("üîó –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        total_tasks = len(self.tasks)
        tasks_with_topics = len([t for t in self.tasks if t.topic])
        
        self.stdout.write(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {total_tasks}")
        self.stdout.write(f"   –ó–∞–¥–∞–Ω–∏–π —Å —Ç–µ–º–∞–º–∏: {tasks_with_topics}")
        
        if tasks_with_topics == 0:
            self.stdout.write("   ‚ö†Ô∏è –ù–∏ —É –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç —Ç–µ–º—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø")
            self.analog_groups = []
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
        tasks_by_topic = {}
        for task in self.tasks:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å —Ç–µ–º–∞
            if not task.topic:
                self.stdout.write(f"   ‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã: {task.text[:30]}...")
                continue
                
            topic_key = f"{task.topic.subject}_{task.topic.grade_level}_{task.topic.name}"
            if topic_key not in tasks_by_topic:
                tasks_by_topic[topic_key] = []
            tasks_by_topic[topic_key].append(task)
        
        self.stdout.write(f"   –¢–µ–º —Å –∑–∞–¥–∞–Ω–∏—è–º–∏: {len(tasks_by_topic)}")
        
        self.analog_groups = []
        
        for topic_key, topic_tasks in tasks_by_topic.items():
            self.stdout.write(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–º—É: {topic_key} ({len(topic_tasks)} –∑–∞–¥–∞–Ω–∏–π)")
            
            if len(topic_tasks) < 3:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –º–∞–ª–æ –∑–∞–¥–∞–Ω–∏–π
                self.stdout.write(f"     –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–º–∞–ª–æ –∑–∞–¥–∞–Ω–∏–π): {len(topic_tasks)} < 3")
                continue
            
            # –°–æ–∑–¥–∞–µ–º 1-3 –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–º—ã
            groups_count = min(random.randint(1, 3), len(topic_tasks) // 3)
            self.stdout.write(f"     –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø: {groups_count}")
            
            for group_num in range(groups_count):
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
                try:
                    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã
                    tasks_for_group = min(random.randint(3, 8), len(topic_tasks))
                    
                    if tasks_for_group > len(topic_tasks):
                        tasks_for_group = len(topic_tasks)
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ç–µ–º—ã
                    group_tasks = random.sample(topic_tasks, tasks_for_group)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    if not group_tasks:
                        self.stdout.write(f"       –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞ {group_num + 1}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å —Ç–µ–º–∞
                    if not group_tasks[0].topic:
                        self.stdout.write(f"       –ü—Ä–æ–ø—É—â–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {group_num + 1} - –Ω–µ—Ç —Ç–µ–º—ã —É –∑–∞–¥–∞–Ω–∏–π")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–æ–≥–æ–≤
                    group_name = f"{topic_key.replace('_', ' ')} - –ì—Ä—É–ø–ø–∞ {group_num + 1}"
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
                    try:
                        description = f"–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ {group_tasks[0].topic.name}"
                    except AttributeError:
                        description = f"–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–≥—Ä—É–ø–ø–∞ {group_num + 1})"
                    
                    analog_group = AnalogGroup.objects.create(
                        name=group_name,
                        description=description
                    )
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    relations_created = 0
                    for task in group_tasks:
                        try:
                            TaskGroup.objects.create(
                                task=task,
                                group=analog_group
                            )
                            relations_created += 1
                        except Exception as e:
                            self.stdout.write(f"         ‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –∑–∞–¥–∞–Ω–∏—è {task.get_short_uuid()}: {e}")
                    
                    self.analog_groups.append(analog_group)
                    self.stdout.write(f"     ‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}': {relations_created} –∑–∞–¥–∞–Ω–∏–π")
                    
                    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                    for task in group_tasks:
                        if task in topic_tasks:
                            topic_tasks.remove(task)
                            
                except Exception as e:
                    self.stdout.write(f"     ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_num + 1}: {e}")
                    continue
        
        total_groups = len(self.analog_groups)
        self.stdout.write(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø –∞–Ω–∞–ª–æ–≥–æ–≤: {total_groups}")

    def create_works(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        self.stdout.write("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
        
        work_templates = [
            "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —Ç–µ–º–µ '{}'",
            "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ '{}'",
            "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞: {}",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ '{}'",
            "–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –ø–æ {}",
        ]
        
        self.works = []
        works_count = self.size_config['works']
        
        for i in range(works_count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
            topic = random.choice(list(self.topics.values()))
            work_name = random.choice(work_templates).format(topic.name)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—Ç—É
            work = Work.objects.create(
                name=work_name,
                work_type=random.choice(['test', 'quiz', 'exam', 'diagnostic', 'homework', 'practice']),
                duration=random.choice([45, 60, 90, 120]),
                variant_counter=0
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≥—Ä—É–ø–ø—ã –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ç–µ–º—ã
            topic_groups = [ag for ag in self.analog_groups 
                           if topic.name in ag.name]
            
            if not topic_groups:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º 2-5 –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π –≤ —Ä–∞–±–æ—Ç—É
            selected_groups = random.sample(topic_groups, min(random.randint(2, 5), len(topic_groups)))
            
            for analog_group in selected_groups:
                WorkAnalogGroup.objects.create(
                    work=work,
                    analog_group=analog_group,
                    count=random.randint(1, 2)  # 1-2 –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (2-4 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
            variants_count = random.randint(2, 4)
            work.generate_variants(variants_count)
            
            self.works.append(work)

    def create_students(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤"""
        self.stdout.write("üë• –°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤...")
        
        # –ò–º–µ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        first_names_m = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–ê—Ä—Ç–µ–º', '–ò–≤–∞–Ω', '–ú–∏—Ö–∞–∏–ª', '–î–∞–Ω–∏–∏–ª', '–ï–≥–æ—Ä', '–ê–Ω–¥—Ä–µ–π', '–ò–ª—å—è']
        first_names_f = ['–ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–î–∞—Ä—å—è', '–ú–∞—Ä–∏—è', '–ü–æ–ª–∏–Ω–∞', '–ê–Ω–Ω–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–ê–ª–∏—Å–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞', '–°–æ—Ñ–∏—è']
        last_names = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–í–æ–ª–∫–æ–≤', '–°–æ–∫–æ–ª–æ–≤', '–õ–µ–±–µ–¥–µ–≤', '–ö–æ–∑–ª–æ–≤']
        middle_names_m = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', '–î–º–∏—Ç—Ä–∏–µ–≤–∏—á', '–ú–∞–∫—Å–∏–º–æ–≤–∏—á', '–ê—Ä—Ç–µ–º–æ–≤–∏—á', '–ò–≤–∞–Ω–æ–≤–∏—á', '–ú–∏—Ö–∞–π–ª–æ–≤–∏—á']
        middle_names_f = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', '–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞', '–ú–∞–∫—Å–∏–º–æ–≤–Ω–∞', '–ê—Ä—Ç–µ–º–æ–≤–Ω–∞', '–ò–≤–∞–Ω–æ–≤–Ω–∞', '–ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å—ã (7–ê, 7–ë, 8–ê, 8–ë, 9–ê, 9–ë)
        classes = []
        for grade in [7, 8, 9]:
            for letter in ['–ê', '–ë']:
                class_name = f"{grade}{letter}"
                student_group = StudentGroup.objects.create(name=class_name)
                classes.append(student_group)
        
        # –°–æ–∑–¥–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤
        students_count = self.size_config['students']
        students_per_class = students_count // len(classes)
        
        self.students = []
        
        for class_group in classes:
            for i in range(students_per_class):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª —Å–ª—É—á–∞–π–Ω–æ
                is_male = random.choice([True, False])
                
                first_name = random.choice(first_names_m if is_male else first_names_f)
                last_name = random.choice(last_names)
                
                # –°–∫–ª–æ–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞
                if not is_male and last_name.endswith('–æ–≤'):
                    last_name = last_name[:-2] + '–æ–≤–∞'
                elif not is_male and last_name.endswith('–∏–Ω'):
                    last_name = last_name[:-2] + '–∏–Ω–∞'
                
                middle_name = random.choice(middle_names_m if is_male else middle_names_f)
                
                # Email (30% —É—á–µ–Ω–∏–∫–æ–≤)
                email = ''
                if random.random() < 0.3:
                    email_name = f"{first_name.lower()}.{last_name.lower()}"
                    email = f"{email_name}@example.com"
                
                student = Student.objects.create(
                    first_name=first_name,
                    last_name=last_name,
                    middle_name=middle_name,
                    email=email
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Å
                class_group.students.add(student)
                self.students.append(student)

    def create_courses(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ —Ä–∞–±–æ—Ç (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        self.stdout.write("üìö –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤...")
        
        subjects = ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞']
        grades = [7, 8, 9]
        
        self.courses = []
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏
        from django.db import connection
        
        for subject in subjects:
            for grade in grades:
                course_name = f"{subject} {grade} –∫–ª–∞—Å—Å"
                
                course = Course.objects.create(
                    name=course_name,
                    subject=subject,
                    grade_level=grade,
                    academic_year='2024-2025',
                    description=f"–ö—É—Ä—Å {subject.lower()} –¥–ª—è {grade} –∫–ª–∞—Å—Å–∞",
                    start_date=datetime(2024, 9, 1).date(),
                    end_date=datetime(2025, 5, 31).date(),
                    total_hours=random.randint(60, 120),
                    hours_per_week=random.choice([2, 3, 4]),
                    is_active=True
                )
                
                # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∞–±–æ—Ç
                suitable_works = Work.objects.filter(
                    workanaloggroup__analog_group__taskgroup__task__topic__subject=subject,
                    workanaloggroup__analog_group__taskgroup__task__topic__grade_level=grade
                ).distinct()
                
                suitable_works_list = list(suitable_works)
                self.stdout.write(f"   –ù–∞–π–¥–µ–Ω–æ {len(suitable_works_list)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∞–±–æ—Ç –¥–ª—è {course_name}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã –≤ –∫—É—Ä—Å
                if suitable_works_list:
                    selected_works = random.sample(
                        suitable_works_list, 
                        min(random.randint(3, 8), len(suitable_works_list))
                    )
                    
                    for i, work in enumerate(selected_works, 1):
                        CourseAssignment.objects.create(
                            course=course,
                            work=work,
                            order=i,
                            planned_date=datetime(2024, 9, 1).date() + timedelta(weeks=i*2),
                            weight=random.uniform(0.8, 1.2)
                        )
                    
                    self.stdout.write(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ {len(selected_works)} —Ä–∞–±–æ—Ç –≤ {course_name}")
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∞–±–æ—Ç –¥–ª—è {course_name}")
                
                self.courses.append(course)

                
    def create_events(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏ —É—á–∞—Å—Ç–∏–π"""
        self.stdout.write("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
        
        self.events = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞
        for course in self.courses:
            course_works = [ca.work for ca in course.courseassignment_set.all()]
            
            if not course_works:
                continue
            
            # –°–æ–∑–¥–∞–µ–º 2-4 —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫—É—Ä—Å
            events_count = min(random.randint(2, 4), len(course_works))
            selected_works = random.sample(course_works, events_count)
            
            for i, work in enumerate(selected_works):
                # –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è
                event_date = datetime(2024, 9, 15) + timedelta(weeks=i*3 + random.randint(0, 7))
                
                event = Event.objects.create(
                    name=f"{work.name} - {course.name}",
                    work=work,
                    course=course,
                    planned_date=event_date,
                    actual_start=event_date + timedelta(minutes=random.randint(-10, 30)),
                    status=random.choice(['completed', 'graded', 'reviewing']),
                    description=f"–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ {work.get_work_type_display().lower()} –¥–ª—è {course.name}",
                    location=f"–ö–∞–±–∏–Ω–µ—Ç {random.randint(101, 350)}"
                )
                
                # –ù–∞—Ö–æ–¥–∏–º —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
                suitable_students = [s for s in self.students 
                                   if any(sg.get_grade_level() == course.grade_level 
                                         for sg in s.studentgroup_set.all())]
                
                if not suitable_students:
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (70-100% —É—á–µ–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞)
                participants_count = int(len(suitable_students) * random.uniform(0.7, 1.0))
                participants = random.sample(suitable_students, participants_count)
                
                variants = list(work.variant_set.all())
                
                for student in participants:
                    # –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è
                    participation_status = random.choices(
                        ['completed', 'graded', 'absent'],
                        weights=[70, 25, 5]
                    )[0]
                    
                    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                    started_at = None
                    completed_at = None
                    graded_at = None
                    
                    if participation_status != 'absent':
                        started_at = event.actual_start + timedelta(minutes=random.randint(0, 15))
                        completed_at = started_at + timedelta(minutes=random.randint(30, work.duration))
                        
                        if participation_status == 'graded':
                            graded_at = completed_at + timedelta(days=random.randint(1, 7))
                    
                    participation = EventParticipation.objects.create(
                        event=event,
                        student=student,
                        variant=random.choice(variants) if variants else None,
                        status=participation_status,
                        started_at=started_at,
                        completed_at=completed_at,
                        graded_at=graded_at,
                        seat_number=f"{random.randint(1, 6)}-{random.randint(1, 8)}"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω–∫—É (–µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)
                    if participation_status == 'graded':
                        self.create_mark_for_participation(participation)
                
                self.events.append(event)

    def create_mark_for_participation(self, participation):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É
        score_weights = [5, 15, 35, 35, 10]  # 2, 3, 4, 5, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        score = random.choices([2, 3, 4, 5, None], weights=score_weights)[0]
        
        max_points = random.randint(20, 50)
        
        if score:
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±–∞–ª–ª—ã –∫ –æ—Ü–µ–Ω–∫–µ
            if score == 5:
                points = random.randint(int(max_points * 0.85), max_points)
            elif score == 4:
                points = random.randint(int(max_points * 0.65), int(max_points * 0.84))
            elif score == 3:
                points = random.randint(int(max_points * 0.45), int(max_points * 0.64))
            else:  # score == 2
                points = random.randint(0, int(max_points * 0.44))
        else:
            points = None
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments_pool = [
            "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ.",
            "–ï—Å—Ç—å –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏ 3.",
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è'.",
            "–û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞!",
            "–ó–∞–¥–∞–Ω–∏–µ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ–ø–æ–ª–Ω–æ.",
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞.",
            "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á.",
            "–ù—É–∂–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ —á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞—á."
        ]
        
        teacher_comment = random.choice(comments_pool) if random.random() < 0.6 else ""
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—è–º (–¥–ª—è —á–∞—Å—Ç–∏ –æ—Ü–µ–Ω–æ–∫)
        task_scores = {}
        if participation.variant and random.random() < 0.4:
            variant_tasks = list(participation.variant.tasks.all())
            for j, task in enumerate(variant_tasks[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –∑–∞–¥–∞–Ω–∏–π
                task_max = random.randint(3, 8)
                task_points = random.randint(0, task_max)
                task_scores[str(task.id)] = {
                    'points': task_points,
                    'max_points': task_max,
                    'comment': random.choice(['–í–µ—Ä–Ω–æ', '–ß–∞—Å—Ç–∏—á–Ω–æ', '–û—à–∏–±–∫–∞', '']) if random.random() < 0.3 else ''
                }
        
        Mark.objects.create(
            participation=participation,
            score=score,
            points=points,
            max_points=max_points,
            task_scores=task_scores,
            teacher_comment=teacher_comment,
            checked_at=participation.graded_at,
            checked_by=random.choice(['–ò–≤–∞–Ω–æ–≤–∞ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤–∞ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤–∞ –°.–°.']),
            is_excellent=score == 5 and random.random() < 0.1,
            needs_attention=score in [2, 3] and random.random() < 0.3
        )

    def create_reviews(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.stdout.write("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-—É—á–∏—Ç–µ–ª–µ–π
        teachers = []
        teacher_names = ['–ò–≤–∞–Ω–æ–≤–∞ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤–∞ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤–∞ –°.–°.', '–ö–æ–∑–ª–æ–≤–∞ –ö.–ö.']
        
        for name in teacher_names:
            last_name, initials = name.split(' ')
            username = f"teacher_{last_name.lower()}"
            
            if not User.objects.filter(username=username).exists():
                user = User.objects.create_user(
                    username=username,
                    first_name=initials[0],
                    last_name=last_name,
                    email=f"{username}@school.edu"
                )
                teachers.append(user)
        
        # –¢–∏–ø–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comment_templates = [
            ('excellent', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑—É–ø—Ä–µ—á–Ω–æ.'),
            ('good', '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã.'),
            ('needs_improvement', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ—à–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π.'),
            ('mistake', '–¢–∏–ø–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–Ω–∞–∫–∞—Ö –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ —Å–∫–æ–±–æ–∫.'),
            ('suggestion', '–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–µ—à–µ–Ω–∏—è.'),
        ]
        
        for category, text in comment_templates:
            ReviewComment.objects.create(
                text=text,
                category=category,
                usage_count=random.randint(0, 50)
            )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        for event in random.sample(self.events, min(10, len(self.events))):
            if teachers and event.status in ['graded', 'reviewing']:
                teacher = random.choice(teachers)
                
                total_participants = event.eventparticipation_set.count()
                checked_participants = event.eventparticipation_set.filter(status='graded').count()
                
                session = ReviewSession.objects.create(
                    reviewer=teacher,
                    event=event,
                    total_participations=total_participants,
                    checked_participations=checked_participants,
                    finished_at=timezone.now() if checked_participants == total_participants else None
                )
                
                if checked_participants > 0:
                    avg_time = timedelta(minutes=random.randint(3, 12))
                    session.average_time_per_work = avg_time
                    session.save()

    def export_to_json(self, filename):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        self.stdout.write(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ {filename}...")
        
        # –ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        export_data = {
            'metadata': {
                'created_at': datetime.now().isoformat(),
                'size': self.size_config,
                'total_records': {
                    'students': Student.objects.count(),
                    'tasks': Task.objects.count(),
                    'works': Work.objects.count(),
                    'events': Event.objects.count(),
                    'marks': Mark.objects.count(),
                }
            },
            'summary': {
                'subjects': list(set(t.subject for t in Topic.objects.all())),
                'grades': list(set(t.grade_level for t in Topic.objects.all())),
                'task_types': list(set(t.task_type for t in Task.objects.all())),
                'work_types': list(set(w.work_type for w in Work.objects.all())),
            }
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
        
        self.stdout.write(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
