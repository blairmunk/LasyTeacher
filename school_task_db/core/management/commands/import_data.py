"""
–ö–æ–º–∞–Ω–¥–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
"""

import json
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from pathlib import Path

class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞'

    def add_arguments(self, parser):
        parser.add_argument('json_file', type=str, help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏')
        parser.add_argument('--dry-run', action='store_true', help='–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
        parser.add_argument('--clear', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º')

    def handle(self, *args, **options):
        json_file = Path(options['json_file'])
        
        if not json_file.exists():
            raise CommandError(f"JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
        
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except json.JSONDecodeError as e:
            raise CommandError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        
        if options['dry_run']:
            self.preview_import(data)
        else:
            if options['clear']:
                self.clear_database()
            self.import_data(data)

    def preview_import(self, data):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞"""
        self.stdout.write("üëÄ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ò–ú–ü–û–†–¢–ê:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        for key, value in data.items():
            if isinstance(value, list):
                self.stdout.write(f"  üìã {key}: {len(value)} –∑–∞–ø–∏—Å–µ–π")
            elif isinstance(value, dict):
                self.stdout.write(f"  üìÅ {key}: {len(value)} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            else:
                self.stdout.write(f"  üìù {key}: {value}")

    def import_data(self, data):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        with transaction.atomic():
            self.stdout.write("üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω—É–∂–¥
            
            self.stdout.write(self.style.SUCCESS("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"))
