from django.core.management.base import BaseCommand
from django.db import transaction
import random
from datetime import datetime, timedelta

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –±–∞–≥–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument('--topics', type=int, default=15, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º')
        parser.add_argument('--tasks', type=int, default=40, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π')
        parser.add_argument('--students', type=int, default=25, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤')

    def handle(self, *args, **options):
        with transaction.atomic():
            self.stdout.write('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
            self.clear_data()
            
            self.stdout.write('üìö –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º –∏ –ø–æ–¥—Ç–µ–º...')
            topics = self.create_topics(options['topics'])
            
            self.stdout.write('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π...')
            tasks = self.create_tasks(options['tasks'], topics)
            
            self.stdout.write('üë• –°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤...')
            students = self.create_students(options['students'])
            
            self.stdout.write('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∏ —Ä–∞–±–æ—Ç...')
            self.create_groups_and_works(tasks)

        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ: {len(topics)} —Ç–µ–º, {len(tasks)} –∑–∞–¥–∞–Ω–∏–π, {len(students)} —É—á–µ–Ω–∏–∫–æ–≤')
        )

    def clear_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–æ–º–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from tasks.models import Task, TaskImage
        from curriculum.models import Topic, SubTopic, Course
        from students.models import Student, StudentGroup
        from task_groups.models import AnalogGroup, TaskGroup
        from works.models import Work, WorkAnalogGroup, Variant
        from events.models import Event, EventParticipation, Mark
        
        # –û—á–∏—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º)
        Mark.objects.all().delete()
        EventParticipation.objects.all().delete()
        Event.objects.all().delete()
        Variant.objects.all().delete()
        WorkAnalogGroup.objects.all().delete()
        Work.objects.all().delete()
        TaskGroup.objects.all().delete()
        AnalogGroup.objects.all().delete()
        TaskImage.objects.all().delete()
        Task.objects.all().delete()
        SubTopic.objects.all().delete()
        Topic.objects.all().delete()
        Course.objects.all().delete()
        
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ ManyToMany —Å–≤—è–∑–µ–π
        for group in StudentGroup.objects.all():
            group.students.clear()  # –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∏ M2M
        
        Student.objects.all().delete()
        StudentGroup.objects.all().delete()


    def create_topics(self, count):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º —Å –ø–æ–¥—Ç–µ–º–∞–º–∏"""
        from curriculum.models import Topic, SubTopic
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        try:
            from references.helpers import get_reference_choices
            subject_choices = get_reference_choices('subjects')
            subjects = [choice[0] for choice in subject_choices] if subject_choices else []
        except:
            subjects = []
        
        if not subjects:
            # Fallback –µ—Å–ª–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            subjects = ['mathematics', 'algebra', 'geometry', 'physics', 'chemistry']
        
        sections = {
            'mathematics': ['–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞', '–ê–ª–≥–µ–±—Ä–∞', '–ì–µ–æ–º–µ—Ç—Ä–∏—è', '–§—É–Ω–∫—Ü–∏–∏'],
            'algebra': ['–í—ã—Ä–∞–∂–µ–Ω–∏—è', '–£—Ä–∞–≤–Ω–µ–Ω–∏—è', '–ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞', '–§—É–Ω–∫—Ü–∏–∏'],
            'geometry': ['–ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è', '–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è', '–í–µ–∫—Ç–æ—Ä—ã'],
            'physics': ['–ú–µ—Ö–∞–Ω–∏–∫–∞', '–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ'],
            'chemistry': ['–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è', '–ù–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è'],
            'russian': ['–§–æ–Ω–µ—Ç–∏–∫–∞', '–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è', '–°–∏–Ω—Ç–∞–∫—Å–∏—Å'],
            'history': ['–î—Ä–µ–≤–Ω–∏–π –º–∏—Ä', '–°—Ä–µ–¥–Ω–∏–µ –≤–µ–∫–∞', '–ù–æ–≤–æ–µ –≤—Ä–µ–º—è'],
            'biology': ['–ë–æ—Ç–∞–Ω–∏–∫–∞', '–ó–æ–æ–ª–æ–≥–∏—è', '–ê–Ω–∞—Ç–æ–º–∏—è']
        }
        
        topics = []
        
        for i in range(count):
            subject = random.choice(subjects)
            section_list = sections.get(subject, ['–†–∞–∑–¥–µ–ª 1', '–†–∞–∑–¥–µ–ª 2', '–†–∞–∑–¥–µ–ª 3'])
            section = random.choice(section_list)
            grade = random.choice([7, 8, 9, 10, 11])
            
            topic = Topic.objects.create(
                name=f"–¢–µ–º–∞ {i+1}: {section}",
                subject=subject,
                section=section,
                grade_level=grade,
                order=i+1,
                description=f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã –ø–æ {section} –¥–ª—è {grade} –∫–ª–∞—Å—Å–∞",
                difficulty_level=random.choice([1, 2, 3])
            )
            topics.append(topic)
            
            # –°–æ–∑–¥–∞–µ–º 2-4 –ø–æ–¥—Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
            subtopic_count = random.randint(2, 4)
            for j in range(subtopic_count):
                SubTopic.objects.create(
                    topic=topic,
                    name=f"–ü–æ–¥—Ç–µ–º–∞ {j+1}: –ß–∞—Å—Ç—å {j+1}",
                    description=f"–ü–æ–¥—Ç–µ–º–∞ {j+1} –ø–æ —Ç–µ–º–µ {topic.name}",
                    order=j+1
                )
        
        return topics

    def create_tasks(self, count, topics):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        from tasks.models import Task
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏)
        try:
            from references.helpers import (
                get_task_type_choices, 
                get_difficulty_choices,
                get_cognitive_level_choices
            )
            
            # –ü—Ä–æ–±—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            task_type_choices = get_task_type_choices()
            difficulty_choices = get_difficulty_choices()
            cognitive_choices = get_cognitive_level_choices()
            
            task_types = [choice[0] for choice in task_type_choices] if task_type_choices else []
            difficulties_from_ref = [choice[0] for choice in difficulty_choices] if difficulty_choices else []
            cognitive_levels = [choice[0] for choice in cognitive_choices] if cognitive_choices else []
        except:
            task_types = []
            difficulties_from_ref = []
            cognitive_levels = []


        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ choices –∏–∑ –º–æ–¥–µ–ª–∏
        if not task_types:
            task_types = [choice[0] for choice in Task.TASK_TYPES]
        
        # –ò–°–ü–†–ê–í–õ–Ø–ï–ú –õ–û–ì–ò–ö–£ –î–õ–Ø DIFFICULTY: –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–∞
        if difficulties_from_ref:
            # –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —á–∏—Å–ª–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ?
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —á–∏—Å–ª–æ
                test_value = int(difficulties_from_ref[0])
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —á–∏—Å–ª–∞
                difficulties = [int(d) for d in difficulties_from_ref]
                self.stdout.write(f'üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {difficulties}')
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ —Å—Ç—Ä–æ–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –∏–∑ –º–æ–¥–µ–ª–∏
                difficulties = [choice[0] for choice in Task.DIFFICULTY_LEVELS]
                self.stdout.write(f'üìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–∞ –∏–∑ –º–æ–¥–µ–ª–∏: {difficulties}')
        else:
            # –ù–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
            difficulties = [choice[0] for choice in Task.DIFFICULTY_LEVELS]
            self.stdout.write(f'üìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–∞ –∏–∑ –º–æ–¥–µ–ª–∏: {difficulties}')
        
        if not cognitive_levels:
            cognitive_levels = ['remember', 'understand', 'apply', 'analyze']


        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º
        try:
            from references.helpers import get_reference_choices
            subject_choices = get_reference_choices('subjects')
            subjects = [choice[0] for choice in subject_choices] if subject_choices else []
        except:
            subjects = []


        if not subjects:
            # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            subjects = ['mathematics', 'algebra', 'geometry', 'physics', 'chemistry']
        
        tasks = []
        
        for i in range(count):
            topic = random.choice(topics)
            
            # 70% –∑–∞–¥–∞–Ω–∏–π —Å –ø–æ–¥—Ç–µ–º–æ–π, 30% –±–µ–∑
            subtopic = None
            if random.random() < 0.7:
                subtopics = list(topic.subtopics.all())
                if subtopics:
                    subtopic = random.choice(subtopics)
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            task_type = random.choice(task_types)
            difficulty = random.choice(difficulties)  # –í–°–ï–ì–î–ê –ß–ò–°–õ–û!
            cognitive_level = random.choice(cognitive_levels)
            
            # –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–¥–∞–Ω–∏–π
            if i < 3:
                self.stdout.write(f'üîç –ó–∞–¥–∞–Ω–∏–µ {i+1}: difficulty={difficulty} (—Ç–∏–ø: {type(difficulty)})')
            
            task = Task.objects.create(
                text=f"–ó–∞–¥–∞–Ω–∏–µ {i+1}: –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ —Ç–µ–º–µ {topic.name}. "
                    f"–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ä–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ. "
                    f"–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è.",
                answer=f"–û—Ç–≤–µ—Ç –∫ –∑–∞–¥–∞–Ω–∏—é {i+1}",
                short_solution=f"–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è {i+1}",
                full_solution=f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è {i+1} —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
                hint=f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {i+1}",
                topic=topic,
                subtopic=subtopic,
                task_type=task_type,
                difficulty=difficulty,  # –ß–ò–°–õ–û!
                cognitive_level=cognitive_level,
                content_element=f"{random.randint(1,5)}.{random.randint(1,9)}",
                requirement_element=f"{random.randint(1,3)}.{random.randint(1,9)}",
                estimated_time=random.choice([5, 10, 15, 20, 30, 45])
            )
            tasks.append(task)
        
        return tasks

    def create_students(self, count):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤"""
        from students.models import Student, StudentGroup
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã (–∫–ª–∞—Å—Å—ã)
        groups = []
        for grade in [7, 8, 9, 10, 11]:
            for letter in ['–ê', '–ë']:
                group = StudentGroup.objects.create(
                    name=f"{grade}{letter}"
                )
                groups.append(group)
                self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å: {group.name}')
        
        # –°–æ–∑–¥–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤
        first_names = [
            '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–ú–∞–∫—Å–∏–º', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
            '–ê–Ω–¥—Ä–µ–π', '–û–ª—å–≥–∞', '–ù–∏–∫–∏—Ç–∞', '–¢–∞—Ç—å—è–Ω–∞', '–ê—Ä—Ç–µ–º', '–ï–ª–µ–Ω–∞',
            '–°–µ—Ä–≥–µ–π', '–ù–∞—Ç–∞–ª—å—è', '–ê–ª–µ–∫—Å–µ–π', '–ò—Ä–∏–Ω–∞', '–í–ª–∞–¥–∏–º–∏—Ä', '–°–≤–µ—Ç–ª–∞–Ω–∞'
        ]
        last_names = [
            '–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–ö–æ–∑–ª–æ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤',
            '–ü–µ—Ç—Ä–æ–≤–∞', '–ò–≤–∞–Ω–æ–≤–∞', '–§–µ–¥–æ—Ä–æ–≤–∞', '–ú–∏—Ö–∞–π–ª–æ–≤–∞', '–°–æ–∫–æ–ª–æ–≤–∞', '–Ø–∫–æ–≤–ª–µ–≤–∞',
            '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–í–∞—Å–∏–ª—å–µ–≤'
        ]
        
        students = []
        for i in range(count):
            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            middle_name = random.choice(['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', '–°–µ—Ä–≥–µ–µ–≤–∏—á', '–î–º–∏—Ç—Ä–∏–µ–≤–∏—á']) if i % 2 == 0 else random.choice(['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', '–°–µ—Ä–≥–µ–µ–≤–Ω–∞', '–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞'])
            
            student = Student.objects.create(
                first_name=first_name,
                last_name=last_name,
                middle_name=middle_name,
                email=f"{first_name.lower()}.{last_name.lower()}{i+1}@school.edu"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª—É—á–∞–π–Ω—É—é –≥—Ä—É–ø–ø—É
            group = random.choice(groups)
            group.students.add(student)
            
            students.append(student)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —É—á–µ–Ω–∏–∫–æ–≤
            if i < 3:
                self.stdout.write(f'üë§ –°–æ–∑–¥–∞–Ω —É—á–µ–Ω–∏–∫: {student.get_full_name()} ‚Üí –∫–ª–∞—Å—Å {group.name}')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
        for group in groups:
            count = group.students.count()
            self.stdout.write(f'üìä –ö–ª–∞—Å—Å {group.name}: {count} —É—á–µ–Ω–∏–∫–æ–≤')
        
        return students


    def create_groups_and_works(self, tasks):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∞–Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∞–±–æ—Ç"""
        from task_groups.models import AnalogGroup, TaskGroup
        from works.models import Work, WorkAnalogGroup
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –∞–Ω–∞–ª–æ–≥–æ–≤
        groups = []
        for i in range(5):
            group = AnalogGroup.objects.create(
                name=f"–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ {i+1}",
                description=f"–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {i+1}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º 3-5 –∑–∞–¥–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É
            group_tasks = random.sample(tasks, min(random.randint(3, 5), len(tasks)))
            for task in group_tasks:
                TaskGroup.objects.create(task=task, group=group)
            
            groups.append(group)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—Ç—ã
        try:
            from references.helpers import get_work_type_choices
            work_type_choices = get_work_type_choices()
            work_types = [choice[0] for choice in work_type_choices] if work_type_choices else []
        except:
            work_types = []
        
        if not work_types:
            work_types = ['test', 'quiz', 'exam']
        
        for i in range(3):
            work = Work.objects.create(
                name=f"–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ {i+1}",
                duration=45,
                work_type=random.choice(work_types)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º 2 —Å–ª—É—á–∞–π–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞–±–æ—Ç—É
            selected_groups = random.sample(groups, min(2, len(groups)))
            for j, group in enumerate(selected_groups):
                WorkAnalogGroup.objects.create(
                    work=work,
                    analog_group=group,
                    count=random.randint(1, 2)
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            try:
                work.generate_variants(4)
            except Exception as e:
                self.stdout.write(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {work.name}: {e}')
