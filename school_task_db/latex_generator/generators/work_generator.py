"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä LaTeX –¥–ª—è —Ä–∞–±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""

from typing import Dict, Any
from pathlib import Path

from document_generator.utils.formula_utils import formula_processor
from document_generator.utils.file_utils import sanitize_filename
from latex_generator.utils import sanitize_latex
from latex_generator.utils.latex_image_utils import prepare_images_for_latex, render_task_with_images
from latex_generator.utils.latex_specific import latex_formula_processor
from latex_generator.utils.compilation import latex_compiler, LaTeXCompilationError

from .base import BaseLatexGenerator
import logging

logger = logging.getLogger(__name__)

class WorkLatexGenerator(BaseLatexGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä LaTeX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏"""
    
    def get_template_name(self) -> str:
        return 'latex/work/all_variants.tex'
    
    def get_output_filename(self, work) -> str:
        return f"{work.name}_all_variants.tex"
    
    def prepare_context(self, work) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º—É–ª"""
        
        variants = work.variant_set.all().order_by('number')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        all_variants_data = []
        document_errors = []
        document_warnings = []
        
        for variant in variants:
            variant_data = self._prepare_variant_context(variant)
            all_variants_data.append(variant_data)
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            document_errors.extend(variant_data.get('errors', []))
            document_warnings.extend(variant_data.get('warnings', []))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        work_name_processed = latex_formula_processor.render_for_latex_safe(work.name)
        document_errors.extend(work_name_processed['errors'])
        document_warnings.extend(work_name_processed['warnings'])
        
        return {
            'work': work,
            'work_name': work_name_processed['content'],
            'variants': all_variants_data,
            'total_variants': len(all_variants_data),
            'with_answers': getattr(self, '_with_answers', False),
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Ñ–æ—Ä–º—É–ª
            'has_formula_errors': len(document_errors) > 0,
            'has_formula_warnings': len(document_warnings) > 0,
            'formula_errors': document_errors,
            'formula_warnings': document_warnings,
        }
    
    def _prepare_variant_context(self, variant):
        """–û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4 —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç {variant.number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_config = getattr(self, '_content_config', {})
        include_answers = content_config.get('include_answers', False)
        include_short_solutions = content_config.get('include_short_solutions', False) 
        include_full_solutions = content_config.get('include_full_solutions', False)
        
        print(f"üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: answers={include_answers}, short={include_short_solutions}, full={include_full_solutions}")
        
        tasks = variant.tasks.all().order_by('id')
        
        prepared_tasks = []
        variant_errors = []
        variant_warnings = []
        
        for i, task in enumerate(tasks, 1):
            print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ {task.id} (–Ω–æ–º–µ—Ä {i})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
            try:
                text_processed = latex_formula_processor.render_for_latex_safe(task.text)
                answer_processed = latex_formula_processor.render_for_latex_safe(task.answer or '')
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—É–ª –∑–∞–¥–∞–Ω–∏—è {task.id}: {e}")
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                text_processed = {'content': task.text, 'errors': [str(e)], 'warnings': []}
                answer_processed = {'content': task.answer or '', 'errors': [], 'warnings': []}
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            task_errors = []
            task_warnings = []
            
            task_errors.extend(text_processed['errors'])
            task_errors.extend(answer_processed['errors'])
            task_warnings.extend(text_processed['warnings'])
            task_warnings.extend(answer_processed['warnings'])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            additional_fields = {}
        # –û—Ç–≤–µ—Ç—ã - –≤–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –ª—é–±–æ–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω
            if include_answers:
                additional_fields['answer'] = answer_processed['content']
            else:
                additional_fields['answer'] = ''
            
            # –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
            if include_short_solutions and task.short_solution:
                try:
                    short_processed = latex_formula_processor.render_for_latex_safe(task.short_solution)
                    additional_fields['short_solution'] = short_processed['content']
                    task_errors.extend(short_processed['errors'])
                    task_warnings.extend(short_processed['warnings'])
                except Exception as e:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
                    additional_fields['short_solution'] = task.short_solution
            else:
                additional_fields['short_solution'] = ''
            
            # –ü–æ–ª–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
            if include_full_solutions and task.full_solution:
                try:
                    full_processed = latex_formula_processor.render_for_latex_safe(task.full_solution)
                    additional_fields['full_solution'] = full_processed['content']
                    task_errors.extend(full_processed['errors'])
                    task_warnings.extend(full_processed['warnings'])
                except Exception as e:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
                    additional_fields['full_solution'] = task.full_solution
            else:
                additional_fields['full_solution'] = ''
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å)
            for field_name in ['hint', 'instruction']:
                field_value = getattr(task, field_name, None)
                if field_value:
                    try:
                        processed = latex_formula_processor.render_for_latex_safe(field_value)
                        additional_fields[field_name] = processed['content']
                        task_errors.extend(processed['errors'])
                        task_warnings.extend(processed['warnings'])
                    except Exception as e:
                        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—è {field_name}: {e}")
                        additional_fields[field_name] = field_value  # Fallback
                else:
                    additional_fields[field_name] = ''
            
            # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É –∑–∞–¥–∞–Ω–∏—è
            try:
                images_count = task.images.count()
                print(f"üîç –ó–∞–¥–∞–Ω–∏–µ {task.id}: –Ω–∞–π–¥–µ–Ω–æ {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                if images_count > 0:
                    for img in task.images.all():
                        print(f"üîç   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img.id}: —Ñ–∞–π–ª={img.image.name}, –ø–æ–∑–∏—Ü–∏—è={img.position}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                task_images = prepare_images_for_latex(task, self.output_dir)
                print(f"üîç –ü–æ—Å–ª–µ prepare_images_for_latex: {len(task_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                for idx, img in enumerate(task_images):
                    print(f"üîç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx}: –∫–ª—é—á–∏ = {list(img.keys())}")
                    if 'minipage_config' in img:
                        print(f"üîç   minipage_config –µ—Å—Ç—å, layout = {img['minipage_config']['layout']}")
                    else:
                        print("‚ùå   minipage_config –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                        
            except Exception as e:
                print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è {task.id}: {e}")
                print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                import traceback
                print(f"‚ùå Traceback: {traceback.format_exc()}")
                task_images = []  # Fallback - –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
            task_data = {
                'number': i,
                'task': task,
                'text': text_processed['content'],
                'answer': answer_processed['content'],
                'images': task_images,
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Ñ–æ—Ä–º—É–ª
                'has_formula_errors': len(task_errors) > 0,
                'has_formula_warnings': len(task_warnings) > 0,
                'formula_errors': task_errors,
                'formula_warnings': task_warnings,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            task_data.update(additional_fields)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π LaTeX –∫–æ–¥ —Å —É—á–µ—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            try:
                if task_images:
                    print(f"üîç –í—ã–∑—ã–≤–∞–µ–º render_task_with_images —Å {len(task_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
                    latex_content = render_task_with_images(
                        {'text': task_data['text']}, 
                        task_images
                    )
                    print(f"üîç render_task_with_images –≤–µ—Ä–Ω—É–ª: {len(latex_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üîç –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {latex_content[:100]}...")
                    task_data['latex_content'] = latex_content
                else:
                    print("üîç –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
                    task_data['latex_content'] = task_data['text']
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –≤ render_task_with_images: {e}")
                task_data['latex_content'] = task_data['text']  # Fallback
            
            prepared_tasks.append(task_data)
            variant_errors.extend(task_errors)
            variant_warnings.extend(task_warnings)
        
        return {
            'variant': variant,
            'tasks': prepared_tasks,
            'total_tasks': len(prepared_tasks),
            'errors': variant_errors,
            'warnings': variant_warnings,
        }
    
    def generate(self, work, output_format='pdf'):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –í—ã–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é LaTeX —Ñ–∞–π–ª–∞
            files = super().generate(work, output_format)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º—É–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context = self.prepare_context(work)
            
            if context.get('has_formula_errors'):
                logger.warning(f"–†–∞–±–æ—Ç–∞ {work.name} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö: {context['formula_errors']}")
            
            if context.get('has_formula_warnings'):
                logger.info(f"–†–∞–±–æ—Ç–∞ {work.name} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö: {context['formula_warnings']}")
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ PDF, –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
            if output_format == 'pdf' and files:
                latex_file_path = Path(files[0])
                
                compilation_result = latex_compiler.compile_latex_safe(
                    latex_file_path, 
                    self.output_dir
                )
                
                if compilation_result['success']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PDF –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
                    pdf_path = compilation_result['pdf_path']
                    if pdf_path not in files:
                        files.append(pdf_path)
                    
                    if compilation_result.get('has_warnings'):
                        logger.info(f"LaTeX –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –¥–ª—è {work.name}")
                
                else:
                    # –ù–µ—É–¥–∞—á–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è - –ª–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
                    error_msg = compilation_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    logger.error(f"LaTeX –∫–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã {work.name}: {error_msg}")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
                    error_report = self._generate_error_report(work, compilation_result)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö
                    error_file = self.output_dir / f"{work.name}_latex_errors.txt"
                    error_file.write_text(error_report, encoding='utf-8')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
                    error_file_str = str(error_file)
                    if error_file_str not in files:
                        files.append(error_file_str)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    raise LaTeXCompilationError(
                        error_msg, 
                        error_details=compilation_result,
                        latex_log=compilation_result.get('latex_log')
                    )
            
            return files
            
        except LaTeXCompilationError:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º LaTeX –æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LaTeX –¥–ª—è —Ä–∞–±–æ—Ç—ã {work.name}: {e}")
            raise
    
    def _generate_error_report(self, work, compilation_result: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
        report_lines = [
            f"–û–¢–ß–ï–¢ –û–ë –û–®–ò–ë–ö–ê–• LATEX –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò",
            f"======================================",
            f"",
            f"–†–∞–±–æ—Ç–∞: {work.name}",
            f"–î–∞—Ç–∞: {getattr(work, 'created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
            f"–¢–∏–ø –æ—à–∏–±–∫–∏: {compilation_result.get('error_type', 'unknown')}",
            f"",
            f"–û–°–ù–û–í–ù–ê–Ø –û–®–ò–ë–ö–ê:",
            f"{compilation_result.get('message', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}",
            f"",
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        errors = compilation_result.get('errors', [])
        if errors:
            report_lines.extend([
                "–î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:",
                "==============="
            ])
            
            for i, error in enumerate(errors, 1):
                report_lines.extend([
                    f"{i}. {error.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    f"   –°—Ç—Ä–æ–∫–∞: {error.get('line_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                context = error.get('context', [])
                if context:
                    report_lines.extend([
                        "   –ö–æ–Ω—Ç–µ–∫—Å—Ç:"
                    ] + [f"   {line}" for line in context])
                
                report_lines.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = compilation_result.get('suggestions', [])
        if suggestions:
            report_lines.extend([
                "–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:",
                "============================"
            ])
            
            for i, suggestion in enumerate(suggestions, 1):
                report_lines.append(f"{i}. {suggestion}")
            
            report_lines.append("")
        
        return "\n".join(report_lines)
    
    def generate_with_answers(self, work, output_format='pdf'):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏"""
        self._with_answers = True
        try:
            return self.generate(work, output_format)
        finally:
            self._with_answers = False
