"""–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LaTeX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

from pathlib import Path
from django.core.management.base import BaseCommand, CommandError
from django.apps import apps

from latex_generator.generators.registry import registry

class Command(BaseCommand):
    help = '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è LaTeX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
    
    def add_arguments(self, parser):
        parser.add_argument(
            'type', 
            choices=registry.get_available_types(),
            help='–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
        )
        parser.add_argument('object_id', type=int, help='ID –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
        parser.add_argument(
            '--format',
            choices=['latex', 'pdf'],
            default='pdf',
            help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: latex –∏–ª–∏ pdf'
        )
        parser.add_argument(
            '--output-dir',
            default='latex_output',
            help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'
        )
        parser.add_argument(
            '--with-answers',
            action='store_true',
            help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã (–¥–ª—è —Ä–∞–±–æ—Ç)'
        )
    
    def handle(self, *args, **options):
        doc_type = options['type']
        object_id = options['object_id']
        output_format = options['format']
        output_dir = Path(options['output_dir'])
        with_answers = options['with_answers']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        generator_class = registry.get_generator(doc_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            model_class = self._get_model_class(doc_type)
            obj = model_class.objects.get(pk=object_id)
        except model_class.DoesNotExist:
            raise CommandError(f'{doc_type.title()} —Å ID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = generator_class(output_dir)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.stdout.write(f'üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {doc_type} –¥–ª—è: {obj}')
        if doc_type == 'work':
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: variants -> variant_set
            variants_count = obj.variant_set.count()
            if variants_count == 0:
                raise CommandError('–£ —Ä–∞–±–æ—Ç—ã –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.')
            self.stdout.write(f'üìã –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {variants_count}')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        try:
            if doc_type == 'work' and with_answers:
                files = generator.generate_with_answers(obj, output_format)
            else:
                files = generator.generate(obj, output_format)
            
            self.stdout.write(
                self.style.SUCCESS(f'üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}')
            )
            
            for file_path in files:
                self.stdout.write(f'  üìÑ {file_path}')
                
        except Exception as e:
            raise CommandError(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}')
    
    def _get_model_class(self, doc_type):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        model_mapping = {
            'work': 'works.Work',
            # –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º:
            # 'report': 'reports.Report',
        }
        
        if doc_type not in model_mapping:
            raise CommandError(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}')
        
        app_label, model_name = model_mapping[doc_type].split('.')
        return apps.get_model(app_label, model_name)
