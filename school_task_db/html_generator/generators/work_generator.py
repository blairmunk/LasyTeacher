"""HTML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MathJax –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

from typing import Dict, Any
from pathlib import Path

from document_generator.utils.formula_utils import formula_processor
from document_generator.utils.file_utils import sanitize_filename
from html_generator.utils.html_specific import html_formula_processor
from document_generator.utils.html_image_utils import prepare_images_for_html, render_task_with_images_html

from .base import BaseHtmlGenerator
import logging

logger = logging.getLogger(__name__)

class WorkHtmlGenerator(BaseHtmlGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä HTML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏"""
    
    def get_template_name(self) -> str:
        return 'html/work/all_variants.html'
    
    def get_output_filename(self, work) -> str:
        return f"{work.name}_all_variants.html"
    
    def prepare_context(self, work) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º—É–ª"""
        
        variants = work.variant_set.all().order_by('number')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        all_variants_data = []
        document_errors = []
        document_warnings = []
        
        for variant in variants:
            variant_data = self._prepare_variant_context(variant)
            all_variants_data.append(variant_data)
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            document_errors.extend(variant_data.get('errors', []))
            document_warnings.extend(variant_data.get('warnings', []))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        work_name_processed = html_formula_processor.render_for_html_safe(work.name)
        document_errors.extend(work_name_processed['errors'])
        document_warnings.extend(work_name_processed['warnings'])
        
        return {
            'work': work,
            'work_name': work_name_processed['content'],
            'variants': all_variants_data,
            'total_variants': len(all_variants_data),
            'with_answers': getattr(self, '_with_answers', False),
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Ñ–æ—Ä–º—É–ª
            'has_formula_errors': len(document_errors) > 0,
            'has_formula_warnings': len(document_warnings) > 0,
            'formula_errors': document_errors,
            'formula_warnings': document_warnings,
        }
    
    def _prepare_variant_context(self, variant):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º—É–ª"""
        print(f"üîç HTML: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç {variant.number}")
        
        tasks = variant.tasks.all().order_by('id')
        
        prepared_tasks = []
        variant_errors = []
        variant_warnings = []
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_config = getattr(self, '_content_config', {})
        include_answers = content_config.get('include_answers', False)
        include_short_solutions = content_config.get('include_short_solutions', False) 
        include_full_solutions = content_config.get('include_full_solutions', False)
        
        print(f"üîç HTML: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: answers={include_answers}, short={include_short_solutions}, full={include_full_solutions}")
        
        for i, task in enumerate(tasks, 1):
            print(f"üîç HTML: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ {task.id} (–Ω–æ–º–µ—Ä {i})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è HTML
            try:
                text_processed = html_formula_processor.render_for_html_safe(task.text)
                
                # –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if include_answers:
                    answer_processed = html_formula_processor.render_for_html_safe(task.answer or '')
                else:
                    answer_processed = {'content': '', 'errors': [], 'warnings': []}
                    
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –≤ HTML –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—É–ª –∑–∞–¥–∞–Ω–∏—è {task.id}: {e}")
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å HTML —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                text_processed = {'content': html_formula_processor._escape_html(task.text), 'errors': [str(e)], 'warnings': []}
                answer_processed = {'content': '', 'errors': [], 'warnings': []}
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            task_errors = []
            task_warnings = []
            
            task_errors.extend(text_processed['errors'])
            task_errors.extend(answer_processed['errors'])
            task_warnings.extend(text_processed['warnings'])
            task_warnings.extend(answer_processed['warnings'])
            
            # –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            additional_fields = {}
            
            # –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
            if include_short_solutions and task.short_solution:
                try:
                    short_processed = html_formula_processor.render_for_html_safe(task.short_solution)
                    additional_fields['short_solution'] = short_processed['content']
                    task_errors.extend(short_processed['errors'])
                    task_warnings.extend(short_processed['warnings'])
                except Exception as e:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –≤ HTML –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
                    additional_fields['short_solution'] = html_formula_processor._escape_html(task.short_solution)
            else:
                additional_fields['short_solution'] = ''
            
            # –ü–æ–ª–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
            if include_full_solutions and task.full_solution:
                try:
                    full_processed = html_formula_processor.render_for_html_safe(task.full_solution)
                    additional_fields['full_solution'] = full_processed['content']
                    task_errors.extend(full_processed['errors'])
                    task_warnings.extend(full_processed['warnings'])
                except Exception as e:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –≤ HTML –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
                    additional_fields['full_solution'] = html_formula_processor._escape_html(task.full_solution)
            else:
                additional_fields['full_solution'] = ''
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å)
            for field_name in ['hint', 'instruction']:
                field_value = getattr(task, field_name, None)
                if field_value:
                    try:
                        processed = html_formula_processor.render_for_html_safe(field_value)
                        additional_fields[field_name] = processed['content']
                        task_errors.extend(processed['errors'])
                        task_warnings.extend(processed['warnings'])
                    except Exception as e:
                        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ HTML –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—è {field_name}: {e}")
                        additional_fields[field_name] = html_formula_processor._escape_html(field_value)
                else:
                    additional_fields[field_name] = ''
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è HTML
            try:
                images_count = task.images.count()
                print(f"üîç HTML: –ó–∞–¥–∞–Ω–∏–µ {task.id}: –Ω–∞–π–¥–µ–Ω–æ {images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                if images_count > 0:
                    for img in task.images.all():
                        print(f"üîç HTML:   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img.id}: —Ñ–∞–π–ª={img.image.name}, –ø–æ–∑–∏—Ü–∏—è={img.position}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è HTML
                task_images = prepare_images_for_html(task, self.output_dir)
                print(f"üîç HTML: –ü–æ—Å–ª–µ prepare_images_for_html: {len(task_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                        
            except Exception as e:
                print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ HTML –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è {task.id}: {e}")
                task_images = []  # Fallback - –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
            task_data = {
                'number': i,
                'task': task,
                'text': text_processed['content'],
                'answer': answer_processed['content'],
                'images': task_images,
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Ñ–æ—Ä–º—É–ª
                'has_formula_errors': len(task_errors) > 0,
                'has_formula_warnings': len(task_warnings) > 0,
                'formula_errors': task_errors,
                'formula_warnings': task_warnings,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            task_data.update(additional_fields)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π HTML –∫–æ–¥ —Å —É—á–µ—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            try:
                if task_images:
                    print(f"üîç HTML: –í—ã–∑—ã–≤–∞–µ–º render_task_with_images_html —Å {len(task_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
                    html_content = render_task_with_images_html(
                        {'text': task_data['text']}, 
                        task_images
                    )
                    print(f"üîç HTML: render_task_with_images_html –≤–µ—Ä–Ω—É–ª: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    task_data['html_content'] = html_content
                else:
                    print("üîç HTML: –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
                    task_data['html_content'] = task_data['text']
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –≤ HTML render_task_with_images: {e}")
                task_data['html_content'] = task_data['text']  # Fallback
            
            prepared_tasks.append(task_data)
            variant_errors.extend(task_errors)
            variant_warnings.extend(task_warnings)
        
        return {
            'variant': variant,
            'tasks': prepared_tasks,
            'total_tasks': len(prepared_tasks),
            'errors': variant_errors,
            'warnings': variant_warnings,
        }
    
    def generate_with_answers(self, work):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Ä–∞–±–æ—Ç—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏"""
        self._with_answers = True
        try:
            return self.generate(work)
        finally:
            self._with_answers = False
