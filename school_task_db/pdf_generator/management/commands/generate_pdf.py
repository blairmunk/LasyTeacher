"""–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: HTML + PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π"""

from django.core.management.base import BaseCommand, CommandError
from django.apps import apps
from pathlib import Path
import logging

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ HTML‚ÜíPDF pipeline'

    def add_arguments(self, parser):
        parser.add_argument('object_type', choices=['work'])
        parser.add_argument('object_id', type=int)
        parser.add_argument('--with-answers', action='store_true')
        parser.add_argument('--output-dir', default='pdf_output')
        parser.add_argument('--keep-html', action='store_true', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML —Ñ–∞–π–ª—ã')
        parser.add_argument('--format', choices=['A4', 'A5', 'Letter'], default='A4')

    def handle(self, *args, **options):
        object_type = options['object_type']
        object_id = options['object_id']
        
        try:
            if object_type == 'work':
                Work = apps.get_model('works', 'Work')
                work = Work.objects.get(id=object_id)
                
                self.stdout.write(f"üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è: [{work.get_short_uuid()}] {work.name}")
                
                # –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
                from html_generator.generators.work_generator import WorkHtmlGenerator
                html_gen = WorkHtmlGenerator(output_dir='temp_html_output')
                
                if options['with_answers']:
                    html_files = html_gen.generate_with_answers(work)
                else:
                    html_files = html_gen.generate(work)
                
                self.stdout.write(f"‚úÖ HTML —Å–æ–∑–¥–∞–Ω: {len(html_files)} —Ñ–∞–π–ª–æ–≤")
                
                # –®–ê–ì 2: HTML ‚Üí PDF
                from pdf_generator.generators.html_to_pdf import HtmlToPdfGenerator
                pdf_gen = HtmlToPdfGenerator(format=options['format'])
                
                pdf_files = []
                for html_file in html_files:
                    html_path = Path(html_file)
                    pdf_name = html_path.stem + '.pdf'
                    pdf_path = Path(options['output_dir']) / pdf_name
                    
                    self.stdout.write(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: {html_path.name}")
                    result = pdf_gen.generate_pdf(html_path, pdf_path)
                    pdf_files.append(result)
                    
                    file_size = result.stat().st_size / 1024
                    self.stdout.write(f"  ‚úÖ PDF: {result.name} ({file_size:.1f} KB)")
                
                # –®–ê–ì 3: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if not options['keep_html']:
                    import shutil
                    shutil.rmtree('temp_html_output', ignore_errors=True)
                    self.stdout.write("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ HTML —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
                
                # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                self.stdout.write("")
                self.stdout.write("üéâ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                for pdf_file in pdf_files:
                    self.stdout.write(f"  üìÑ {pdf_file}")
                    
        except Exception as e:
            raise CommandError(f"–û—à–∏–±–∫–∞: {e}")
