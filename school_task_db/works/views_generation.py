"""Views –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""

import json
import logging
from pathlib import Path
from django.http import JsonResponse, HttpResponse, Http404
from django.shortcuts import get_object_or_404, render
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import csrf_exempt
from django.contrib import messages
from django.urls import reverse
from django.conf import settings
import mimetypes

from .models import Work, Variant
from tasks.models import Task

logger = logging.getLogger(__name__)

@require_http_methods(["POST"])
def generate_work_ajax(request, work_id):
    """Ajax –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4 —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
    work = get_object_or_404(Work, id=work_id)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        generator_type = request.POST.get('generator_type', 'pdf')
        pdf_format = request.POST.get('format', 'A4')
        
        # –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        answer_type = request.POST.get('answer_type', 'tasks_only')
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        if request.POST.get('with_answers', '0') == '1' and answer_type == 'tasks_only':
            answer_type = 'with_answers'
        
        logger.info(f"üåê –í–µ–±-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {generator_type} –¥–ª—è —Ä–∞–±–æ—Ç—ã {work.id}: {work.name}")
        logger.info(f"   –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {answer_type}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –≤–∫–ª—é—á–∞—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç
        content_config = {
            'include_answers': answer_type in ['with_answers', 'with_short_solutions', 'with_full_solutions'],
            'include_short_solutions': answer_type in ['with_short_solutions', 'with_full_solutions'],
            'include_full_solutions': answer_type == 'with_full_solutions',
            'answer_type': answer_type  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∑–Ω–∞—Ç—å —Ç–æ—á–Ω—ã–π —Ç–∏–ø
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        if generator_type == 'latex':
            files = generate_latex_work(work, content_config, pdf_format)
            file_type = 'LaTeX'
            
        elif generator_type == 'html':
            files = generate_html_work(work, content_config)
            file_type = 'HTML'
            
        elif generator_type == 'pdf':
            files = generate_pdf_work(work, content_config, pdf_format)
            file_type = 'PDF'
            
        else:
            return JsonResponse({
                'success': False, 
                'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {generator_type}'
            })
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è frontend
        files_info = []
        for file_path in files:
            path = Path(file_path)
            if path.exists():
                file_size = path.stat().st_size / 1024  # KB
                files_info.append({
                    'name': path.name,
                    'size': f'{file_size:.1f} KB',
                    'download_url': reverse('works:download_generated_file', kwargs={
                        'file_type': generator_type,
                        'filename': path.name
                    })
                })
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        content_descriptions = {
            'tasks_only': '—Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è',
            'with_answers': '—Å –æ—Ç–≤–µ—Ç–∞–º–∏',
            'with_short_solutions': '—Å –∫—Ä–∞—Ç–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏',
            'with_full_solutions': '—Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏'
        }
        
        success_message = f'{file_type} –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω ({content_descriptions[answer_type]})'
        
        return JsonResponse({
            'success': True,
            'message': success_message,
            'files': files_info,
            'total_files': len(files_info)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generator_type} –¥–ª—è —Ä–∞–±–æ—Ç—ã {work.id}: {e}")
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

def generate_latex_work(work, content_config, pdf_format='A4'):
    """–û–ë–ù–û–í–õ–ï–ù–û: LaTeX –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4 —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    from latex_generator.generators.work_generator import WorkLatexGenerator
    
    generator = WorkLatexGenerator(output_dir='web_latex_output')
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator._content_config = content_config
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥, –Ω–æ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –≤–Ω—É—Ç—Ä–∏
    if content_config['include_answers'] or content_config['include_short_solutions'] or content_config['include_full_solutions']:
        return generator.generate_with_answers(work)
    else:
        return generator.generate(work)

def generate_html_work(work, content_config):
    """–û–ë–ù–û–í–õ–ï–ù–û: HTML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4 —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    from html_generator.generators.work_generator import WorkHtmlGenerator
    
    generator = WorkHtmlGenerator(output_dir='web_html_output')
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator._content_config = content_config
    
    if content_config['include_answers'] or content_config['include_short_solutions'] or content_config['include_full_solutions']:
        return generator.generate_with_answers(work)  
    else:
        return generator.generate(work)

def generate_pdf_work(work, content_config, pdf_format='A4'):
    """–û–ë–ù–û–í–õ–ï–ù–û: PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4 —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    import tempfile
    from html_generator.generators.work_generator import WorkHtmlGenerator
    from pdf_generator.generators.html_to_pdf import HtmlToPdfGenerator
    
    # –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    with tempfile.TemporaryDirectory() as temp_dir:
        html_gen = WorkHtmlGenerator(output_dir=temp_dir)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        html_gen._content_config = content_config
        
        if content_config['include_answers'] or content_config['include_short_solutions'] or content_config['include_full_solutions']:
            html_files = html_gen.generate_with_answers(work)
        else:
            html_files = html_gen.generate(work)
        
        # –®–ê–ì 2: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML‚ÜíPDF
        pdf_gen = HtmlToPdfGenerator(format=pdf_format, wait_for_mathjax=True)
        
        pdf_files = []
        output_dir = Path('web_pdf_output')
        output_dir.mkdir(parents=True, exist_ok=True)
        
        for html_file in html_files:
            html_path = Path(html_file)
            pdf_name = html_path.stem + '.pdf'
            pdf_path = output_dir / pdf_name
            
            result = pdf_gen.generate_pdf(html_path, pdf_path)
            pdf_files.append(str(result))
    
    return pdf_files

@require_http_methods(["GET"])
def download_generated_file(request, file_type, filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    type_to_dir = {
        'latex': 'web_latex_output',
        'html': 'web_html_output', 
        'pdf': 'web_pdf_output'
    }
    
    output_dir = type_to_dir.get(file_type)
    if not output_dir:
        raise Http404("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
    
    file_path = Path(output_dir) / filename
    
    if not file_path.exists():
        raise Http404("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    content_type, _ = mimetypes.guess_type(str(file_path))
    if not content_type:
        content_type = 'application/octet-stream'
    
    # –ß–∏—Ç–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, 'rb') as f:
            response = HttpResponse(f.read(), content_type=content_type)
            response['Content-Disposition'] = f'attachment; filename="{filename}"'
            return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        raise Http404("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")

@require_http_methods(["GET"])
def generation_status_ajax(request):
    """Ajax –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –≤ –±—É–¥—É—â–µ–º)"""
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    return JsonResponse({
        'status': 'ready',
        'message': '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
    })

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ views –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
@require_http_methods(["POST"])
def generate_variant_ajax(request, variant_id):
    """Ajax –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    variant = get_object_or_404(Variant, id=variant_id)
    work = variant.work
    
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞, –Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    
    return JsonResponse({
        'success': True,
        'message': f'–í–∞—Ä–∏–∞–Ω—Ç {variant.number} —Ä–∞–±–æ—Ç—ã "{work.name}" –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏',
        'files': []
    })
