from django.core.management.base import BaseCommand
from django.db import transaction
from references.models import ReferenceCategory, ReferenceItem

class Command(BaseCommand):
    help = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ'
        )

    def handle(self, *args, **options):
        force = options.get('force', False)
        
        with transaction.atomic():
            self.stdout.write('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...')
            
            # 1. –ü—Ä–µ–¥–º–µ—Ç—ã
            self.create_subjects(force)
            
            # 2. –¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
            self.create_task_types(force)
            
            # 3. –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            self.create_difficulty_levels(force)
            
            # 4. –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            self.create_cognitive_levels(force)
            
            # 5. –¢–∏–ø—ã —Ä–∞–±–æ—Ç
            self.create_work_types(force)
            
            # 6. –ö–ª–∞—Å—Å—ã
            self.create_grade_levels(force)
            
            # 7. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            self.create_comment_categories(force)

        self.stdout.write(
            self.style.SUCCESS('‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!')
        )

    def create_subjects(self, force=False):
        category, created = ReferenceCategory.objects.get_or_create(
            code='subjects',
            defaults={
                'name': '–ü—Ä–µ–¥–º–µ—Ç—ã',
                'description': '–£—á–µ–±–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                'is_system': False
            }
        )
        
        if created or force:
            self.stdout.write('  üìö –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...')
            
            subjects_data = [
                ('mathematics', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '#2E86AB', 'fas fa-calculator'),
                ('algebra', '–ê–ª–≥–µ–±—Ä–∞', '#A23B72', 'fas fa-square-root-alt'),
                ('geometry', '–ì–µ–æ–º–µ—Ç—Ä–∏—è', '#F18F01', 'fas fa-shapes'),
                ('physics', '–§–∏–∑–∏–∫–∞', '#C73E1D', 'fas fa-atom'),
                ('chemistry', '–•–∏–º–∏—è', '#4CAF50', 'fas fa-flask'),
                ('russian', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '#9C27B0', 'fas fa-language'),
                ('literature', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '#795548', 'fas fa-book-open'),
                ('history', '–ò—Å—Ç–æ—Ä–∏—è', '#FF9800', 'fas fa-landmark'),
                ('biology', '–ë–∏–æ–ª–æ–≥–∏—è', '#4CAF50', 'fas fa-dna'),
                ('geography', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '#009688', 'fas fa-globe'),
                ('english', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', '#3F51B5', 'fas fa-globe-americas'),
                ('informatics', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '#607D8B', 'fas fa-laptop-code'),
            ]
            
            for i, (code, name, color, icon) in enumerate(subjects_data, 1):
                ReferenceItem.objects.update_or_create(
                    category=category,
                    code=code,
                    defaults={
                        'name': name,
                        'order': i * 10,
                        'color': color,
                        'icon': icon,
                        'is_active': True
                    }
                )

    def create_task_types(self, force=False):
        category, created = ReferenceCategory.objects.get_or_create(
            code='task_types',
            defaults={
                'name': '–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π',
                'description': '–¢–∏–ø—ã —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π'
            }
        )
        
        if created or force:
            self.stdout.write('  üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π...')
            
            task_types_data = [
                ('computational', '–†–∞—Å—á—ë—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞', '#2196F3', 'fas fa-calculator'),
                ('qualitative', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞', '#FF9800', 'fas fa-lightbulb'),
                ('theoretical', '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å', '#9C27B0', 'fas fa-question-circle'),
                ('practical', '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '#4CAF50', 'fas fa-tools'),
                ('test', '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '#F44336', 'fas fa-check-square'),
                ('creative', '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '#E91E63', 'fas fa-palette'),
                ('research', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '#795548', 'fas fa-search'),
            ]
            
            for i, (code, name, color, icon) in enumerate(task_types_data, 1):
                ReferenceItem.objects.update_or_create(
                    category=category,
                    code=code,
                    defaults={
                        'name': name,
                        'order': i * 10,
                        'color': color,
                        'icon': icon,
                        'is_active': True
                    }
                )

    def create_difficulty_levels(self, force=False):
        category, created = ReferenceCategory.objects.get_or_create(
            code='difficulty_levels',
            defaults={
                'name': '–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
                'description': '–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–π'
            }
        )
        
        if created or force:
            self.stdout.write('  ‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...')
            
            difficulty_data = [
                ('preparatory', '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π', 1, '#4CAF50', 'far fa-star'),
                ('basic', '–ë–∞–∑–æ–≤—ã–π', 2, '#8BC34A', 'fas fa-star'),
                ('advanced', '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π', 3, '#FF9800', 'fas fa-star'),
                ('high', '–í—ã—Å–æ–∫–∏–π', 4, '#FF5722', 'fas fa-star'),
                ('expert', '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π', 5, '#F44336', 'fas fa-star'),
            ]
            
            for code, name, value, color, icon in difficulty_data:
                ReferenceItem.objects.update_or_create(
                    category=category,
                    code=code,
                    defaults={
                        'name': name,
                        'numeric_value': value,
                        'order': value * 10,
                        'color': color,
                        'icon': icon,
                        'is_active': True
                    }
                )

    def create_cognitive_levels(self, force=False):
        category, created = ReferenceCategory.objects.get_or_create(
            code='cognitive_levels',
            defaults={
                'name': '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏',
                'description': '–£—Ä–æ–≤–Ω–∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ –ë–ª—É–º—É)'
            }
        )
        
        if created or force:
            self.stdout.write('  üß† –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π...')
            
            cognitive_data = [
                ('remember', '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '#9E9E9E', 'fas fa-brain'),
                ('understand', '–ü–æ–Ω–∏–º–∞–Ω–∏–µ', '#2196F3', 'fas fa-lightbulb'),
                ('apply', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '#4CAF50', 'fas fa-tools'),
                ('analyze', '–ê–Ω–∞–ª–∏–∑', '#FF9800', 'fas fa-search'),
                ('evaluate', '–û—Ü–µ–Ω–∫–∞', '#9C27B0', 'fas fa-balance-scale'),
                ('create', '–°–æ–∑–¥–∞–Ω–∏–µ', '#F44336', 'fas fa-magic'),
            ]
            
            for i, (code, name, color, icon) in enumerate(cognitive_data, 1):
                ReferenceItem.objects.update_or_create(
                    category=category,
                    code=code,
                    defaults={
                        'name': name,
                        'order': i * 10,
                        'color': color,
                        'icon': icon,
                        'is_active': True
                    }
                )

    def create_work_types(self, force=False):
        category, created = ReferenceCategory.objects.get_or_create(
            code='work_types',
            defaults={
                'name': '–¢–∏–ø—ã —Ä–∞–±–æ—Ç',
                'description': '–¢–∏–ø—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç'
            }
        )
        
        if created or force:
            self.stdout.write('  üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç...')
            
            work_types_data = [
                ('test', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '#F44336', 'fas fa-file-alt'),
                ('quiz', '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '#2196F3', 'fas fa-edit'),
                ('exam', '–≠–∫–∑–∞–º–µ–Ω', '#9C27B0', 'fas fa-graduation-cap'),
                ('diagnostic', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞', '#FF9800', 'fas fa-stethoscope'),
                ('homework', '–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞', '#4CAF50', 'fas fa-home'),
                ('practice', '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞', '#795548', 'fas fa-tools'),
                ('project', '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '#E91E63', 'fas fa-project-diagram'),
            ]
            
            for i, (code, name, color, icon) in enumerate(work_types_data, 1):
                ReferenceItem.objects.update_or_create(
                    category=category,
                    code=code,
                    defaults={
                        'name': name,
                        'order': i * 10,
                        'color': color,
                        'icon': icon,
                        'is_active': True
                    }
                )

    def create_grade_levels(self, force=False):
        category, created = ReferenceCategory.objects.get_or_create(
            code='grade_levels',
            defaults={
                'name': '–ö–ª–∞—Å—Å—ã',
                'description': '–£—Ä–æ–≤–Ω–∏ –æ–±—É—á–µ–Ω–∏—è (–∫–ª–∞—Å—Å—ã)'
            }
        )
        
        if created or force:
            self.stdout.write('  üéì –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤...')
            
            for grade in range(1, 12):  # 1-11 –∫–ª–∞—Å—Å—ã
                ReferenceItem.objects.update_or_create(
                    category=category,
                    code=f'grade_{grade}',
                    defaults={
                        'name': f'{grade} –∫–ª–∞—Å—Å',
                        'numeric_value': grade,
                        'order': grade * 10,
                        'is_active': True
                    }
                )

    def create_comment_categories(self, force=False):
        category, created = ReferenceCategory.objects.get_or_create(
            code='comment_categories',
            defaults={
                'name': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
                'description': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–ø–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç'
            }
        )
        
        if created or force:
            self.stdout.write('  üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...')
            
            comment_categories_data = [
                ('excellent', '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '#4CAF50', 'fas fa-star'),
                ('good', '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞', '#2196F3', 'fas fa-thumbs-up'),
                ('satisfactory', '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '#FF9800', 'fas fa-hand-paper'),
                ('needs_improvement', '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è', '#FF5722', 'fas fa-exclamation-triangle'),
                ('mistake', '–¢–∏–ø–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞', '#F44336', 'fas fa-times-circle'),
                ('suggestion', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', '#9C27B0', 'fas fa-lightbulb'),
            ]
            
            for i, (code, name, color, icon) in enumerate(comment_categories_data, 1):
                ReferenceItem.objects.update_or_create(
                    category=category,
                    code=code,
                    defaults={
                        'name': name,
                        'order': i * 10,
                        'color': color,
                        'icon': icon,
                        'is_active': True
                    }
                )
