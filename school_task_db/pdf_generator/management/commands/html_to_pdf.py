"""–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HTML –≤ PDF"""

from django.core.management.base import BaseCommand, CommandError
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HTML —Ñ–∞–π–ª—ã –≤ PDF —á–µ—Ä–µ–∑ Playwright'

    def add_arguments(self, parser):
        # HTML —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        parser.add_argument(
            'input_path',
            help='–ü—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å HTML —Ñ–∞–π–ª–∞–º–∏'
        )
        
        # –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        parser.add_argument(
            '--output-dir',
            default='pdf_output',
            help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: pdf_output)'
        )
        
        # –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        parser.add_argument(
            '--format',
            choices=['A4', 'A3', 'Letter', 'Legal'],
            default='A4',
            help='–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: A4)'
        )
        
        # –ü–æ–ª—è
        parser.add_argument(
            '--margin',
            default='1cm',
            help='–ü–æ–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1cm)'
        )
        
        # –§–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        parser.add_argument(
            '--no-background',
            action='store_true',
            help='–ù–µ –ø–µ—á–∞—Ç–∞—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç–∞'
        )
        
        # MathJax
        parser.add_argument(
            '--skip-mathjax',
            action='store_true',
            help='–ù–µ –∂–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ MathJax'
        )

    def handle(self, *args, **options):
        input_path = Path(options['input_path'])
        output_dir = options['output_dir']
        
        if not input_path.exists():
            raise CommandError(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {input_path}")
        
        try:
            from pdf_generator.generators.html_to_pdf import HtmlToPdfGenerator
            from pdf_generator.utils import get_output_pdf_path, batch_html_to_pdf_paths
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            generator_options = {
                'format': options['format'],
                'print_background': not options['no_background'],
                'wait_for_mathjax': not options['skip_mathjax'],
            }
            
            # –ü–∞—Ä—Å–∏–º margin
            margin_value = options['margin']
            generator_options['margin'] = {
                'top': margin_value, 'right': margin_value, 
                'bottom': margin_value, 'left': margin_value
            }
            
            generator = HtmlToPdfGenerator(**generator_options)
            
            if input_path.is_file():
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª
                if not input_path.suffix.lower() == '.html':
                    raise CommandError(f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .html: {input_path}")
                
                output_path = get_output_pdf_path(input_path, output_dir)
                
                self.stdout.write(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: {input_path.name}")
                result_path = generator.generate_pdf(input_path, output_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result_path.exists():
                    file_size = result_path.stat().st_size / 1024  # KB
                    self.stdout.write(
                        self.style.SUCCESS(
                            f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {result_path} ({file_size:.1f} KB)"
                        )
                    )
                else:
                    raise CommandError("PDF —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            
            elif input_path.is_dir():
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                html_files = list(input_path.glob('*.html'))
                
                if not html_files:
                    raise CommandError(f"HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {input_path}")
                
                self.stdout.write(f"üîÑ –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: {len(html_files)}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤
                file_pairs = batch_html_to_pdf_paths(html_files, output_dir)
                
                if not file_pairs:
                    raise CommandError("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                self.stdout.write(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(file_pairs)} —Ñ–∞–π–ª–æ–≤...")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Ñ–∞–π–ª—ã
                for i, (html_file, pdf_file) in enumerate(file_pairs, 1):
                    self.stdout.write(f"  {i}/{len(file_pairs)}: {html_file.name}")
                    
                    try:
                        result_path = generator.generate_pdf(html_file, pdf_file)
                        file_size = result_path.stat().st_size / 1024  # KB
                        self.stdout.write(f"    ‚úÖ PDF: {pdf_file.name} ({file_size:.1f} KB)")
                    except Exception as e:
                        self.stdout.write(
                            self.style.ERROR(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
                        )
                
                self.stdout.write(
                    self.style.SUCCESS(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! PDF —Ñ–∞–π–ª—ã –≤: {output_dir}")
                )
        
        except ImportError as e:
            raise CommandError(
                f"Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}. "
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install playwright && playwright install chromium"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HTML‚ÜíPDF: {e}")
            raise CommandError(f"–û—à–∏–±–∫–∞: {e}")
