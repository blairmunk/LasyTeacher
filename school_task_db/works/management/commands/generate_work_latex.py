import os
import subprocess
from pathlib import Path
from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from works.models import Work, Variant
from works.latex.generator import LaTeXGenerator

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è LaTeX/PDF –¥–ª—è —Ä–∞–±–æ—Ç—ã'
    
    def add_arguments(self, parser):
        parser.add_argument('work_id', type=int, help='ID —Ä–∞–±–æ—Ç—ã')
        parser.add_argument(
            '--variant', 
            type=int, 
            help='–ù–æ–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)'
        )
        parser.add_argument(
            '--format',
            choices=['latex', 'pdf'],
            default='pdf',
            help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: latex –∏–ª–∏ pdf'
        )
        parser.add_argument(
            '--output-dir',
            default='latex_output',
            help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'
        )

    def handle(self, *args, **options):
        work_id = options['work_id']
        variant_number = options.get('variant')
        output_format = options['format']
        output_dir = Path(options['output_dir'])
        
        try:
            work = Work.objects.get(pk=work_id)
        except Work.DoesNotExist:
            raise CommandError(f'–†–∞–±–æ—Ç–∞ —Å ID {work_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
        output_dir.mkdir(exist_ok=True)
        
        self.stdout.write(f'üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è LaTeX –¥–ª—è —Ä–∞–±–æ—Ç—ã: {work.name}')
        
        generator = LaTeXGenerator(work, output_dir)
        
        if variant_number:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
            try:
                variant = Variant.objects.get(work=work, number=variant_number)
                files = generator.generate_variant(variant, output_format)
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {variant_number} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {files}'
                    )
                )
            except Variant.DoesNotExist:
                raise CommandError(f'–í–∞—Ä–∏–∞–Ω—Ç {variant_number} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            variants = Variant.objects.filter(work=work).order_by('number')
            if not variants.exists():
                raise CommandError('–£ —Ä–∞–±–æ—Ç—ã –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.')
            
            all_files = []
            for variant in variants:
                files = generator.generate_variant(variant, output_format)
                all_files.extend(files)
                self.stdout.write(f'  ‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {variant.number}: {files}')
            
            self.stdout.write(
                self.style.SUCCESS(
                    f'üéâ –ì–æ—Ç–æ–≤–æ! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(all_files)} —Ñ–∞–π–ª–æ–≤'
                )
            )
