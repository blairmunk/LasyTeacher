"""–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª"""

from django.core.management.base import BaseCommand
from django.core.cache import cache
from tasks.utils import math_status_cache
from tasks.models import Task

class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--action',
            type=str,
            choices=['stats', 'refresh', 'clear', 'warmup'],
            default='stats',
            help='–î–µ–π—Å—Ç–≤–∏–µ —Å –∫—ç—à–µ–º: stats (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞), refresh (–æ–±–Ω–æ–≤–∏—Ç—å), clear (–æ—á–∏—Å—Ç–∏—Ç—å), warmup (–ø—Ä–æ–≥—Ä–µ–≤)'
        )
        
        parser.add_argument(
            '--batch-size',
            type=int,
            default=100,
            help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π'
        )
        
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è'
        )
    
    def handle(self, *args, **options):
        action = options['action']
        
        if action == 'stats':
            self.show_cache_stats()
        
        elif action == 'refresh':
            self.refresh_cache(options['force'])
        
        elif action == 'clear':
            self.clear_cache()
        
        elif action == 'warmup':
            self.warmup_cache(options['batch_size'])
    
    def show_cache_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        self.stdout.write(self.style.SUCCESS('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª:'))
        
        stats = math_status_cache.get_cache_stats()
        
        self.stdout.write(f"  –û—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à: {'‚úÖ' if stats['all_status_cached'] else '‚ùå'}")
        self.stdout.write(f"  –ó–∞–¥–∞–Ω–∏—è —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏: {'‚úÖ' if stats['with_math_cached'] else '‚ùå'}")
        self.stdout.write(f"  –ó–∞–¥–∞–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏: {'‚úÖ' if stats['with_errors_cached'] else '‚ùå'}")
        
        if stats['with_math_cached']:
            self.stdout.write(f"  üìê –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏: {stats['total_with_math']}")
            self.stdout.write(f"  ‚ùå –ó–∞–¥–∞–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö: {stats['total_with_errors']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
        total_tasks = Task.objects.count()
        if total_tasks > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
            cached_tasks = 0
            for task_id in Task.objects.values_list('id', flat=True)[:100]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100
                cache_key = math_status_cache.get_task_cache_key(task_id)
                if cache.get(cache_key) is not None:
                    cached_tasks += 1
            
            self.stdout.write(f"  üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –≤ –±–∞–∑–µ: {total_tasks}")
            self.stdout.write(f"  üóÑÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ (–≤—ã–±–æ—Ä–∫–∞): {cached_tasks}/100")
    
    def refresh_cache(self, force=False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à"""
        if not force:
            confirm = input("–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π? [y/N]: ")
            if confirm.lower() != 'y':
                self.stdout.write("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        self.stdout.write("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞...")
        
        try:
            stats = math_status_cache.refresh_cache()
            
            self.stdout.write(self.style.SUCCESS("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"))
            self.stdout.write(f"  üìê –ó–∞–¥–∞–Ω–∏–π —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏: {len(stats['with_math'])}")
            self.stdout.write(f"  ‚ùå –ó–∞–¥–∞–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏: {len(stats['with_errors'])}")
            self.stdout.write(f"  ‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {len(stats['with_warnings'])}")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}"))
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        confirm = input("–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª? [y/N]: ")
        if confirm.lower() != 'y':
            self.stdout.write("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        math_status_cache.invalidate_all_cache()
        self.stdout.write(self.style.SUCCESS("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω"))
    
    def warmup_cache(self, batch_size):
        """–ü—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π"""
        self.stdout.write(f"üî• –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ (–±–∞—Ç—á: {batch_size})...")
        
        total_tasks = Task.objects.count()
        processed = 0
        
        for offset in range(0, total_tasks, batch_size):
            tasks_batch = Task.objects.all()[offset:offset + batch_size]
            
            for task in tasks_batch:
                math_status_cache.get_task_math_status(task)
                processed += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if processed % (batch_size * 5) == 0:
                self.stdout.write(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_tasks}")
        
        self.stdout.write(self.style.SUCCESS(f"‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –∑–∞–¥–∞–Ω–∏–π"))
